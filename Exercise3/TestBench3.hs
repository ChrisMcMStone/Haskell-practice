module TestBench3 where

import safe Exercise3(OpName(..), Expr(..), Program(..), Store, Store', VariableName)
import TestHelpers
import Control.Exception
import Test.QuickCheck
import Test.QuickCheck.Test (isSuccess, output)

-- This file was automatically generated
-- by GenerateTests3.hs
-- on 2014-10-14 15:04:36.26682 UTC

main = do
    putStrLn "Exercise: Implement cond (10 points)"
    unitTests "func_cond" func_cond func_cond_in func_cond_out
    putStrLn "Exercise: Write factorials (10 points)"
    quickTest "run_factorial" run_factorial
    putStrLn "Exercise: Implement opEval (10 points)"
    unitTests "func_eval_expression" func_eval_expression func_eval_expression_in func_eval_expression_out
    putStrLn "Exercise: fetch and update (10 points)"
    quickTest "prop_fetch_update_1" prop_fetch_update_1
    quickTest "prop_fetch_update_2" prop_fetch_update_2
    quickTest "prop_fetch_update_3" prop_fetch_update_2
    quickTest "prop_no_duplicate_variable_names" prop_no_duplicate_variable_names
    putStrLn "Exercise: Store', eval', and update' (15 points)"
    quickTest "prop_fetch'update'1" prop_fetch'update'1
    quickTest "prop_fetch'update'2" prop_fetch'update'2
    quickTest "prop_fetch'update'3" prop_fetch'update'3
    quickTest "prop_eval_matches_eval'" prop_eval_matches_eval'
    putStrLn "Exercise: While (10 points)"
    unitTests "func_runHelper" func_runHelper func_runHelper_in func_runHelper_out
    putStrLn "Exercise: convertStore (10 points)"
    unitTests "func_convertStore" func_convertStore func_convertStore_in func_convertStore_out
    putStrLn "Exercise: runHelper' (10 points)"
    unitTests "func_runHelper'" func_runHelper' func_runHelper'_in func_runHelper'_out
    putStrLn "Exercise: constantFolding (15 points)"
    unitTests "func_constantFolding_folds_enough" func_constantFolding_folds_enough func_constantFolding_folds_enough_in func_constantFolding_folds_enough_out

-- START automatically generated inputs/outputs --


-- Inputs and correct outputs for func_cond
func_cond_in = [[0,100,200],[1,200,300],[20,300,400],[-20,300,400]]
func_cond_out = [200,200,300,300]

-- Inputs and correct outputs for func_eval_expression
func_eval_expression_in = [([("z",0),("a",0),("b",0),("c",0),("d",0),("e",0),("f",0),("g",0),("h",0),("i",0),("j",0),("k",0),("l",0),("m",0),("n",0),("o",0),("p",0),("q",0),("r",0),("s",0),("t",0),("u",0),("v",0),("w",0),("x",0),("y",0)],Constant 0),([("h",-1),("i",-1),("j",-1),("k",0),("l",0),("m",0),("n",-1),("o",1),("p",1),("q",-1),("r",0),("s",1),("t",0),("u",0),("v",1),("w",1),("x",-1),("y",0),("z",1),("a",0),("b",1),("c",1),("d",1),("e",0),("f",-1),("g",0)],Op Or [Var "n",Constant (-1)]),([("u",-2),("v",2),("w",-2),("x",-2),("y",-2),("z",1),("a",2),("b",-1),("c",-1),("d",-2),("e",2),("f",1),("g",-1),("h",1),("i",2),("j",2),("k",0),("l",0),("m",-1),("n",-2),("o",1),("p",-1),("q",-2),("r",0),("s",-2),("t",2)],Var "k"),([("y",-1),("z",-2),("a",3),("b",-2),("c",-2),("d",-3),("e",2),("f",2),("g",-3),("h",0),("i",0),("j",-1),("k",-3),("l",2),("m",-2),("n",-3),("o",0),("p",1),("q",2),("r",3),("s",-1),("t",-3),("u",-2),("v",0),("w",1),("x",3)],Var "g"),([("e",-1),("f",2),("g",4),("h",1),("i",1),("j",-1),("k",-3),("l",-1),("m",-1),("n",-4),("o",1),("p",1),("q",1),("r",4),("s",-1),("t",3),("u",3),("v",3),("w",1),("x",2),("y",-2),("z",-4),("a",2),("b",1),("c",-2),("d",3)],Op Mul [Var "h",Var "z"]),([("f",-3),("g",-5),("h",4),("i",-4),("j",-5),("k",-3),("l",-5),("m",5),("n",0),("o",-2),("p",1),("q",3),("r",-4),("s",2),("t",-4),("u",-5),("v",-2),("w",5),("x",0),("y",-5),("z",4),("a",-5),("b",-5),("c",-3),("d",0),("e",0)],Op And [Var "v",Op Leq [Constant (-1),Var "z"]]),([("a",6),("b",-5),("c",-2),("d",5),("e",-6),("f",1),("g",2),("h",-1),("i",-2),("j",-2),("k",0),("l",6),("m",6),("n",5),("o",0),("p",6),("q",-6),("r",-3),("s",2),("t",6),("u",0),("v",1),("w",0),("x",1),("y",5),("z",3)],Op Not [Op Mul [Var "c",Op Mul [Constant (-5),Var "d"]]]),([("u",-1),("v",6),("w",-2),("x",3),("y",7),("z",-4),("a",-3),("b",1),("c",7),("d",-7),("e",-7),("f",1),("g",-4),("h",-3),("i",6),("j",3),("k",3),("l",-7),("m",-7),("n",5),("o",4),("p",2),("q",7),("r",-5),("s",4),("t",-1)],Op Greater [Op Eq [Op Greater [Constant 5,Constant 4],Op Add [Var "q",Constant 7]],Op Eq [Op Geq [Constant (-1),Var "z"],Var "j"]]),([("l",8),("m",5),("n",0),("o",-6),("p",0),("q",-7),("r",2),("s",0),("t",-3),("u",1),("v",2),("w",5),("x",-5),("y",1),("z",3),("a",-1),("b",-8),("c",3),("d",7),("e",-3),("f",-1),("g",-8),("h",-2),("i",-2),("j",-7),("k",1)],Op Add [Op Leq [Op Not [Var "a"],Op Sub [Var "z",Var "v"]],Constant (-1)]),([("k",1),("l",-3),("m",8),("n",3),("o",2),("p",1),("q",-9),("r",1),("s",4),("t",3),("u",-3),("v",-7),("w",-9),("x",8),("y",6),("z",4),("a",4),("b",-8),("c",5),("d",7),("e",-3),("f",-6),("g",6),("h",5),("i",0),("j",1)],Op Not [Op Leq [Op Neg [Op Eq [Constant 3,Constant 1]],Var "e"]]),([("e",-6),("f",0),("g",-10),("h",-2),("i",10),("j",-5),("k",-3),("l",-10),("m",10),("n",-6),("o",3),("p",-9),("q",10),("r",4),("s",-9),("t",-1),("u",-9),("v",8),("w",-3),("x",-2),("y",2),("z",9),("a",10),("b",6),("c",-3),("d",-10)],Op Leq [Op Leq [Op Leq [Op Less [Constant (-1),Constant 2],Op Or [Var "t",Constant 2]],Op Less [Op Eq [Constant (-1),Constant 2],Op Geq [Var "k",Var "k"]]],Constant (-7)]),([("g",-6),("h",3),("i",-6),("j",-6),("k",-4),("l",5),("m",6),("n",-8),("o",0),("p",-1),("q",-10),("r",2),("s",-2),("t",1),("u",10),("v",2),("w",-8),("x",1),("y",3),("z",-6),("a",1),("b",2),("c",3),("d",7),("e",6),("f",3)],Op Or [Constant 7,Op Not [Constant 9]]),([("y",8),("z",2),("a",-10),("b",-4),("c",-2),("d",-9),("e",-7),("f",10),("g",-3),("h",-4),("i",-1),("j",2),("k",-3),("l",1),("m",-3),("n",-1),("o",8),("p",-10),("q",-6),("r",10),("s",-4),("t",-10),("u",-4),("v",-8),("w",-8),("x",8)],Var "h"),([("f",6),("g",-9),("h",1),("i",7),("j",7),("k",3),("l",6),("m",-7),("n",-8),("o",-8),("p",-8),("q",-4),("r",-2),("s",-5),("t",10),("u",7),("v",-4),("w",-2),("x",-4),("y",-2),("z",7),("a",-8),("b",-5),("c",0),("d",4),("e",9)],Op Less [Op Mul [Constant (-6),Var "q"],Constant 5]),([("x",4),("y",0),("z",5),("a",7),("b",-4),("c",8),("d",-3),("e",0),("f",6),("g",8),("h",2),("i",-4),("j",2),("k",-8),("l",6),("m",5),("n",3),("o",-9),("p",9),("q",-2),("r",5),("s",6),("t",4),("u",10),("v",-9),("w",-5)],Op Greater [Op And [Op Eq [Constant 2,Constant (-7)],Op Sub [Var "d",Var "o"]],Op And [Op Greater [Constant 3,Constant 3],Var "m"]]),([("i",-3),("j",-5),("k",-5),("l",0),("m",0),("n",-9),("o",6),("p",7),("q",-5),("r",-6),("s",-1),("t",5),("u",0),("v",8),("w",9),("x",-2),("y",0),("z",-7),("a",-4),("b",-7),("c",-2),("d",3),("e",0),("f",2),("g",8),("h",10)],Op Eq [Op Sub [Constant (-9),Op Mul [Constant 4,Var "c"]],Op Not [Constant (-5)]]),([("p",-10),("q",-1),("r",3),("s",-9),("t",5),("u",-4),("v",2),("w",3),("x",7),("y",7),("z",-3),("a",5),("b",9),("c",-2),("d",-6),("e",4),("f",-2),("g",-9),("h",-1),("i",5),("j",8),("k",4),("l",3),("m",-7),("n",-3),("o",-1)],Op Geq [Op Sub [Op Leq [Var "o",Constant 5],Var "h"],Op Geq [Var "t",Var "h"]]),([("z",3),("a",-2),("b",-4),("c",-9),("d",7),("e",-2),("f",7),("g",9),("h",-6),("i",-5),("j",6),("k",-7),("l",7),("m",-1),("n",5),("o",4),("p",0),("q",7),("r",-7),("s",-4),("t",10),("u",10),("v",-9),("w",2),("x",-7),("y",-7)],Op And [Constant (-10),Var "c"]),([("t",-2),("u",0),("v",-2),("w",-4),("x",9),("y",5),("z",8),("a",-5),("b",-10),("c",6),("d",-9),("e",-5),("f",5),("g",4),("h",7),("i",7),("j",-1),("k",-7),("l",6),("m",9),("n",7),("o",7),("p",-7),("q",3),("r",-2),("s",7)],Op Mul [Op Geq [Op Or [Op Add [Constant (-10),Constant (-9)],Op Or [Var "g",Var "c"]],Constant 0],Op Leq [Op Less [Var "b",Var "f"],Op Geq [Var "b",Var "q"]]]),([("u",-4),("v",-5),("w",0),("x",1),("y",-6),("z",5),("a",-5),("b",-9),("c",3),("d",-3),("e",-9),("f",-7),("g",-1),("h",3),("i",4),("j",-8),("k",-9),("l",-4),("m",2),("n",10),("o",-3),("p",-8),("q",10),("r",-2),("s",1),("t",8)],Constant (-1)),([("t",-9),("u",-3),("v",0),("w",8),("x",-8),("y",-9),("z",-8),("a",-5),("b",1),("c",-2),("d",5),("e",-2),("f",5),("g",4),("h",6),("i",4),("j",4),("k",1),("l",8),("m",2),("n",3),("o",-8),("p",-7),("q",-1),("r",-8),("s",-6)],Op Geq [Op Neg [Op Eq [Op Add [Constant 0,Constant 6],Op Leq [Var "r",Constant (-4)]]],Op Not [Op Less [Var "y",Op Mul [Constant (-3),Var "e"]]]])]
func_eval_expression_out = [0,1,0,-3,-4,1,0,0,0,1,0,1,-4,0,0,0,1,1,0,-1,1]

-- Inputs and correct outputs for func_runHelper
func_runHelper_in = [(Block ["x" := Constant 1,"y" := Constant 1,Print (Constant 0)],[("x",0),("y",0),("z",0),("a",0),("b",0),("c",0),("d",0),("e",0),("f",0),("g",0),("h",0),("i",0),("j",0),("k",0),("l",0),("m",0),("n",0),("o",0),("p",0),("q",0),("r",0),("s",0),("t",0),("u",0),("v",0),("w",0)]),(Block ["x" := Constant 1,"y" := Constant 1,"y" := Var "x"],[("s",-1),("t",-1),("u",1),("v",1),("w",1),("x",0),("y",0),("z",-1),("a",1),("b",1),("c",-1),("d",-1),("e",-1),("f",-1),("g",1),("h",-1),("i",-1),("j",1),("k",-1),("l",0),("m",0),("n",1),("o",-1),("p",-1),("q",-1),("r",1)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [Block ["el" := Constant 2,While (Var "el") (Block ["y" := Constant 2,"el" := Op Sub [Var "el",Constant 1]])],Print (Var "y")]],[("e",2),("f",-2),("g",0),("h",0),("i",0),("j",-1),("k",-1),("l",-1),("m",1),("n",1),("o",-1),("p",-2),("q",-2),("r",-1),("s",1),("t",1),("u",1),("v",2),("w",-1),("x",-1),("y",-1),("z",-2),("a",0),("b",-1),("c",0),("d",0)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [Print (Op Add [Var "y",Var "x"]),IfThenElse (Var "x") (Print (Op And [Op Not [Constant 2],Constant 0])) ("x" := Op Eq [Var "x",Var "y"]),Print (Op Add [Var "x",Constant 1])]],[("g",2),("h",0),("i",-1),("j",2),("k",1),("l",0),("m",3),("n",-1),("o",-3),("p",2),("q",-3),("r",-2),("s",-3),("t",-2),("u",-3),("v",1),("w",-2),("x",-3),("y",3),("z",-3),("a",1),("b",2),("c",-1),("d",-3),("e",0),("f",2)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Or [Var "x",Constant 1]) (Block [IfThenElse (Constant (-4)) ("y" := Op Sub [Constant 1,Constant 4]) ("x" := Op Greater [Op Less [Constant 0,Op Leq [Constant 4,Constant 0]],Constant (-2)]),Block ["r" := Constant 2,While (Var "r") (Block [Print (Constant 1),"r" := Op Sub [Var "r",Constant 1]])]]) (IfThenElse (Op Geq [Op Sub [Op Neg [Constant (-2)],Var "y"],Op Sub [Var "y",Constant (-3)]]) ("x" := Constant 0) (Block ["u" := Constant 3,While (Var "u") (Block ["y" := Op Add [Var "y",Constant (-3)],"u" := Op Sub [Var "u",Constant 1]])]))],[("x",2),("y",4),("z",3),("a",2),("b",-1),("c",0),("d",-4),("e",-2),("f",2),("g",-4),("h",4),("i",3),("j",3),("k",-1),("l",1),("m",-3),("n",2),("o",-3),("p",1),("q",-1),("r",-4),("s",-1),("t",4),("u",1),("v",2),("w",1)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [IfThenElse (Op Less [Constant 3,Op Greater [Constant 3,Op Greater [Constant 1,Constant 4]]]) (Print (Var "y")) (Print (Op Sub [Op Sub [Constant (-3),Op Mul [Var "y",Constant 5]],Var "y"])),Block ["ul" := Constant 1,While (Var "ul") (Block ["y" := Op Or [Op Less [Constant (-1),Constant 1],Constant 4],"ul" := Op Sub [Var "ul",Constant 1]])],IfThenElse (Var "y") (Block ["x" := Op Leq [Constant 1,Constant 5]]) (IfThenElse (Op Leq [Op Geq [Var "x",Constant (-5)],Var "x"]) ("y" := Op Eq [Op Less [Op Not [Var "y"],Constant (-4)],Constant (-5)]) ("y" := Op Mul [Op Sub [Var "y",Var "x"],Op Sub [Constant 4,Constant (-3)]])),Block [Block ["q" := Constant 1,While (Var "q") (Block [Print (Op Neg [Op Sub [Op Greater [Constant (-1),Var "x"],Op Add [Var "q",Var "y"]]]),"q" := Op Sub [Var "q",Constant 1]])],Print (Op Eq [Op Greater [Constant 0,Var "x"],Var "x"])],Block [Print (Var "x"),"y" := Op Mul [Op Greater [Constant 0,Op Eq [Constant (-4),Var "x"]],Op Eq [Var "x",Var "x"]]]]],[("r",2),("s",4),("t",4),("u",-5),("v",4),("w",0),("x",5),("y",-3),("z",-3),("a",1),("b",-3),("c",-1),("d",0),("e",-5),("f",5),("g",3),("h",0),("i",1),("j",-5),("k",1),("l",4),("m",-3),("n",1),("o",-2),("p",0),("q",-1)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["rl" := Constant 6,While (Var "rl") (Block ["y" := Op Not [Constant 1],"rl" := Op Sub [Var "rl",Constant 1]])]],[("j",-2),("k",5),("l",-2),("m",0),("n",-1),("o",2),("p",3),("q",-4),("r",6),("s",4),("t",1),("u",-4),("v",-2),("w",0),("x",-2),("y",5),("z",6),("a",-5),("b",-4),("c",-5),("d",4),("e",2),("f",-2),("g",-4),("h",6),("i",-6)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [Block ["tl" := Constant 4,While (Var "tl") (Block [Print (Op Geq [Op Eq [Var "y",Op Greater [Constant 4,Var "tl"]],Var "tl"]),"tl" := Op Sub [Var "tl",Constant 1]])],IfThenElse (Op Add [Op Neg [Op Not [Var "y"]],Var "x"]) (IfThenElse (Var "x") (Print (Op Eq [Constant (-6),Constant (-5)])) (Print (Op Greater [Var "x",Op Less [Constant (-1),Var "x"]]))) (Print (Op Mul [Constant 4,Op Eq [Var "y",Constant 2]])),"y" := Var "x",IfThenElse (Constant (-4)) ("x" := Op Or [Op Less [Var "x",Var "y"],Constant 5]) (IfThenElse (Op Mul [Var "x",Op Neg [Constant 0]]) ("y" := Var "x") (Print (Op Geq [Op Add [Op Leq [Constant (-2),Var "x"],Var "y"],Op Not [Var "x"]]))),Block [Block ["sl" := Constant 4,While (Var "sl") (Block [Print (Op Eq [Op Greater [Var "x",Op Sub [Var "x",Var "y"]],Op Geq [Constant (-1),Op Mul [Constant 1,Constant (-7)]]]),"sl" := Op Sub [Var "sl",Constant 1]])],Block ["y" := Op And [Op Less [Op Neg [Var "y"],Constant 0],Op Sub [Op Sub [Var "y",Var "y"],Op Or [Var "x",Constant (-4)]]]],"y" := Op Sub [Op Or [Op Eq [Var "y",Constant 7],Op Mul [Constant 2,Constant 5]],Op Neg [Op Or [Var "y",Var "y"]]]]]],[("l",-6),("m",0),("n",-7),("o",3),("p",-7),("q",5),("r",-2),("s",6),("t",3),("u",7),("v",5),("w",-3),("x",-4),("y",0),("z",2),("a",2),("b",-3),("c",1),("d",7),("e",6),("f",-5),("g",-1),("h",6),("i",-7),("j",-7),("k",-2)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["g" := Constant 2,While (Var "g") (Block [Print (Constant (-1)),"g" := Op Sub [Var "g",Constant 1]])]],[("o",-8),("p",-3),("q",-4),("r",-7),("s",3),("t",-7),("u",3),("v",-5),("w",3),("x",-6),("y",-2),("z",-3),("a",-7),("b",-5),("c",8),("d",-8),("e",5),("f",-7),("g",-8),("h",0),("i",-1),("j",5),("k",-6),("l",0),("m",5),("n",4)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [Block [Block ["fl" := Constant 9,While (Var "fl") (Block ["y" := Op Not [Constant (-3)],"fl" := Op Sub [Var "fl",Constant 1]])],Block [Block ["ol" := Constant 3,While (Var "ol") (Block [Print (Op Mul [Op Geq [Var "y",Op Not [Var "x"]],Op Greater [Op Eq [Constant 8,Var "y"],Op Less [Var "x",Var "x"]]]),"ol" := Op Sub [Var "ol",Constant 1]])],Print (Op And [Op Add [Op Not [Var "x"],Op Eq [Constant (-3),Constant 5]],Var "y"])],Block [Print (Op Not [Op Leq [Op Less [Op Less [Var "y",Var "y"],Constant (-2)],Op Leq [Var "x",Op Add [Var "y",Constant 8]]]]),IfThenElse (Op Mul [Var "x",Var "x"]) (Print (Var "x")) ("y" := Op Not [Constant 3])],Block ["y" := Op Greater [Op Add [Op Leq [Constant (-6),Op Neg [Constant (-1)]],Var "y"],Op Geq [Var "y",Op Not [Constant 7]]],"x" := Op Add [Var "x",Op And [Constant (-4),Constant (-2)]]]],Print (Op Or [Op And [Op Leq [Var "x",Constant (-8)],Op Neg [Constant (-4)]],Op Not [Var "x"]]),"x" := Op Mul [Op Not [Var "y"],Op Neg [Op Add [Var "y",Constant (-2)]]],IfThenElse (Op Geq [Op Less [Op And [Var "y",Constant 7],Op Neg [Constant 2]],Op And [Op Add [Op Neg [Var "y"],Op Mul [Constant 8,Var "y"]],Constant 5]]) (IfThenElse (Op Not [Var "x"]) (Block [Print (Op Eq [Op Leq [Op Sub [Constant 6,Constant (-5)],Op And [Op Greater [Var "y",Constant (-8)],Var "x"]],Op Less [Op Geq [Op Not [Constant 7],Op Leq [Var "x",Var "y"]],Var "x"]])]) (IfThenElse (Op Or [Op Or [Constant 0,Constant 7],Constant (-7)]) (Print (Op Geq [Var "x",Op Less [Op Neg [Constant (-7)],Var "y"]])) (Print (Op And [Op Or [Constant 4,Op Neg [Var "y"]],Op Leq [Op Neg [Var "x"],Op Greater [Var "x",Constant (-3)]]])))) (IfThenElse (Constant 3) (IfThenElse (Op Not [Constant 8]) (Print (Op Add [Op Sub [Var "y",Constant (-6)],Op Eq [Var "y",Var "x"]])) (Print (Var "y"))) (IfThenElse (Op Sub [Op Eq [Op And [Op Mul [Constant 9,Var "x"],Var "y"],Op Not [Constant 4]],Op Sub [Op Sub [Var "y",Var "y"],Constant (-1)]]) ("y" := Constant 6) (Print (Var "y")))),Block [Print (Op Less [Var "y",Var "x"]),Print (Op Less [Op Greater [Var "x",Constant 1],Op And [Var "x",Constant (-6)]]),Block ["i" := Constant 1,While (Var "i") (Block ["x" := Op Greater [Op Mul [Op Eq [Var "y",Constant 9],Op Eq [Constant (-5),Constant (-8)]],Op Mul [Constant (-7),Op Geq [Constant 4,Var "x"]]],"i" := Op Sub [Var "i",Constant 1]])],Block [IfThenElse (Constant (-2)) ("x" := Op Less [Op Not [Constant 6],Op Not [Op Not [Constant (-4)]]]) ("x" := Op Not [Op Eq [Op Geq [Op Eq [Constant (-1),Var "x"],Constant (-9)],Op Less [Constant (-5),Var "x"]]]),"y" := Op And [Constant 6,Var "y"]]]]],[("b",6),("c",1),("d",-4),("e",1),("f",2),("g",5),("h",4),("i",-8),("j",-3),("k",-3),("l",-6),("m",-4),("n",7),("o",2),("p",3),("q",-3),("r",-4),("s",6),("t",1),("u",1),("v",-5),("w",2),("x",9),("y",-8),("z",3),("a",3)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Constant (-3)) (Block ["el" := Constant 2,While (Var "el") (Block [Print (Op Mul [Op Or [Var "el",Op Greater [Constant (-8),Var "y"]],Op Less [Var "x",Constant (-1)]]),"el" := Op Sub [Var "el",Constant 1]])]) (Block [Block [Block ["g" := Constant 7,While (Var "g") (Block [Print (Op Mul [Op Eq [Constant 5,Op Less [Constant (-8),Var "g"]],Op Neg [Op Add [Op Eq [Var "x",Constant (-3)],Constant 3]]]),"g" := Op Sub [Var "g",Constant 1]])],Block ["f" := Constant 2,While (Var "f") (Block [Print (Op Eq [Op Sub [Constant (-5),Op Sub [Constant (-6),Constant 3]],Op Less [Op And [Var "x",Constant (-9)],Op Less [Op Geq [Constant (-9),Var "y"],Constant 3]]]),"f" := Op Sub [Var "f",Constant 1]])]],IfThenElse (Constant (-7)) (Block ["g" := Constant 8,While (Var "g") (Block [Print (Op Less [Constant (-7),Var "g"]),"g" := Op Sub [Var "g",Constant 1]])]) (Block ["i" := Constant 2,While (Var "i") (Block ["y" := Op Greater [Op Less [Op Greater [Constant (-4),Op Less [Constant (-6),Constant 10]],Op Add [Var "i",Op Sub [Constant 5,Constant 8]]],Op Or [Constant (-8),Op Or [Op Mul [Constant (-9),Constant (-5)],Op Not [Constant 5]]]],"i" := Op Sub [Var "i",Constant 1]])]),Print (Op Leq [Constant 8,Op And [Op Or [Op Add [Constant 1,Constant 0],Constant (-10)],Constant (-2)]]),Print (Op Mul [Var "x",Op Eq [Var "x",Op Mul [Var "y",Op Eq [Var "x",Var "y"]]]]),Block [Block ["x" := Constant 0,While (Var "x") (Block ["y" := Op Leq [Constant 2,Op Eq [Var "x",Var "x"]],"x" := Op Sub [Var "x",Constant 1]])],Block ["x" := Var "x"]]])],[("h",6),("i",-4),("j",5),("k",4),("l",6),("m",-7),("n",1),("o",-5),("p",-10),("q",1),("r",8),("s",7),("t",-6),("u",3),("v",10),("w",10),("x",10),("y",7),("z",-3),("a",-1),("b",7),("c",-7),("d",-2),("e",0),("f",1),("g",-2)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["cl" := Constant 10,While (Var "cl") (Block [Print (Op Or [Op And [Var "cl",Constant 1],Op Not [Var "x"]]),"cl" := Op Sub [Var "cl",Constant 1]])]],[("b",-1),("c",-8),("d",9),("e",-9),("f",7),("g",8),("h",9),("i",4),("j",-4),("k",9),("l",-5),("m",-8),("n",-10),("o",-4),("p",-6),("q",-6),("r",-4),("s",7),("t",10),("u",6),("v",10),("w",4),("x",-9),("y",7),("z",-6),("a",6)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["o" := Constant 3,While (Var "o") (Block ["x" := Op Mul [Op Eq [Constant 4,Var "o"],Op Add [Constant 9,Op Add [Op Neg [Constant 1],Op Greater [Var "x",Constant 8]]]],"o" := Op Sub [Var "o",Constant 1]])]],[("x",-8),("y",6),("z",-7),("a",0),("b",-1),("c",-8),("d",-1),("e",1),("f",-4),("g",-9),("h",6),("i",-3),("j",0),("k",0),("l",-3),("m",-2),("n",-1),("o",7),("p",5),("q",-9),("r",9),("s",-3),("t",8),("u",-2),("v",-7),("w",8)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Eq [Op Leq [Constant (-6),Op Leq [Op Sub [Var "y",Constant (-10)],Var "x"]],Op Sub [Op Leq [Op Geq [Constant 3,Var "x"],Op Geq [Constant 8,Constant (-7)]],Op Neg [Op And [Var "x",Var "y"]]]]) (Block [Block ["e" := Constant 5,While (Var "e") (Block ["y" := Op Sub [Op Mul [Constant (-4),Constant 8],Op Geq [Op Add [Op And [Constant (-1),Constant (-9)],Constant 7],Op Not [Constant 7]]],"e" := Op Sub [Var "e",Constant 1]])],IfThenElse (Op And [Op Neg [Var "x"],Op Not [Var "x"]]) (Print (Op Mul [Op Geq [Op Sub [Var "x",Op Sub [Var "y",Constant (-5)]],Op Less [Var "y",Constant 4]],Op Less [Op Geq [Var "y",Constant (-5)],Var "y"]])) (Block ["fl" := Constant 8,While (Var "fl") (Block [Print (Op Add [Op Mul [Op Less [Constant 7,Var "fl"],Op Add [Op Or [Var "fl",Var "y"],Var "y"]],Op And [Var "x",Op Geq [Op Sub [Var "x",Var "x"],Op Neg [Var "y"]]]]),"fl" := Op Sub [Var "fl",Constant 1]])]),Block ["gl" := Constant 7,While (Var "gl") (Block ["y" := Op Add [Op Not [Op Leq [Op Neg [Var "x"],Op Or [Constant (-7),Constant 3]]],Op Add [Constant 9,Var "x"]],"gl" := Op Sub [Var "gl",Constant 1]])],Block ["m" := Constant 2,While (Var "m") (Block ["x" := Op Mul [Op Add [Constant (-5),Var "m"],Op Add [Constant 9,Op Or [Constant (-9),Constant (-2)]]],"m" := Op Sub [Var "m",Constant 1]])],IfThenElse (Op Or [Op Greater [Var "x",Op Eq [Constant (-1),Var "x"]],Op Eq [Constant 8,Var "x"]]) (Print (Op Leq [Var "y",Op Mul [Op Eq [Constant (-10),Constant 5],Op Not [Op Not [Constant (-5)]]]])) (Block [Print (Op Leq [Op Eq [Op And [Var "x",Op Leq [Var "y",Constant 10]],Var "x"],Constant 9])])]) (IfThenElse (Op And [Op Add [Op Less [Op Eq [Constant 1,Constant (-3)],Op Greater [Var "y",Var "y"]],Constant 2],Var "y"]) (Block ["d" := Constant 6,While (Var "d") (Block ["y" := Op Neg [Constant (-4)],"d" := Op Sub [Var "d",Constant 1]])]) (Print (Op Sub [Var "y",Op Or [Var "x",Constant (-9)]])))],[("k",-4),("l",-1),("m",6),("n",2),("o",-1),("p",-1),("q",6),("r",-2),("s",0),("t",3),("u",8),("v",-10),("w",-1),("x",-10),("y",8),("z",-6),("a",1),("b",-7),("c",3),("d",0),("e",-6),("f",-10),("g",9),("h",1),("i",3),("j",-4)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Constant (-8)) (IfThenElse (Op Sub [Op Leq [Constant (-7),Var "y"],Op Leq [Op Sub [Op Not [Var "x"],Var "y"],Constant (-4)]]) (IfThenElse (Var "y") (Block ["fl" := Constant 4,While (Var "fl") (Block [Print (Op Neg [Var "y"]),"fl" := Op Sub [Var "fl",Constant 1]])]) (Print (Op Leq [Op And [Var "y",Constant (-6)],Constant 2]))) ("y" := Op And [Var "x",Op Leq [Var "y",Var "y"]])) (Block [Print (Constant (-3)),Print (Op Greater [Constant (-6),Op And [Var "x",Var "y"]]),Block [Block [Print (Op And [Op Neg [Var "x"],Op And [Op Or [Op Greater [Constant (-5),Constant 8],Var "x"],Var "y"]])],Print (Op Greater [Constant (-2),Op Less [Op Sub [Op Leq [Var "x",Var "y"],Op And [Var "x",Var "y"]],Constant (-3)]])],Block ["il" := Constant 1,While (Var "il") (Block [Print (Op Sub [Constant (-1),Var "y"]),"il" := Op Sub [Var "il",Constant 1]])],Block ["bl" := Constant 6,While (Var "bl") (Block ["y" := Op Leq [Op Less [Op Eq [Op Mul [Constant (-6),Var "x"],Constant (-9)],Op Or [Var "x",Constant 8]],Op Sub [Op Geq [Constant 10,Op Not [Constant (-7)]],Var "y"]],"bl" := Op Sub [Var "bl",Constant 1]])]])],[("a",-3),("b",-2),("c",3),("d",-8),("e",-9),("f",-8),("g",6),("h",8),("i",-7),("j",-2),("k",-6),("l",-5),("m",5),("n",-1),("o",7),("p",-8),("q",-5),("r",-9),("s",-5),("t",-2),("u",-6),("v",-6),("w",-2),("x",-1),("y",2),("z",10)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Var "x") (IfThenElse (Op Mul [Op Geq [Op Greater [Var "y",Op Less [Var "y",Constant (-2)]],Op Greater [Constant (-8),Constant 2]],Op Mul [Var "y",Op Mul [Var "y",Var "y"]]]) (IfThenElse (Op Greater [Var "x",Op Leq [Op Leq [Op Geq [Constant 8,Var "x"],Constant (-8)],Constant (-10)]]) ("x" := Op Less [Op Mul [Var "y",Op Or [Op Neg [Var "x"],Op Not [Constant (-9)]]],Op Greater [Var "x",Op Mul [Var "y",Constant (-9)]]]) (Print (Op Less [Constant (-4),Op Leq [Op Sub [Var "y",Var "x"],Var "y"]]))) (Block ["e" := Constant 10,While (Var "e") (Block ["x" := Op Or [Op Neg [Op Greater [Op Sub [Constant (-9),Constant (-3)],Constant 9]],Op Greater [Op Or [Op Neg [Var "e"],Op Less [Constant 9,Constant (-7)]],Constant (-4)]],"e" := Op Sub [Var "e",Constant 1]])])) (IfThenElse (Op Neg [Op Leq [Constant 5,Op Leq [Constant 5,Var "y"]]]) (Block ["x" := Op Add [Op Eq [Constant 0,Constant (-9)],Constant (-1)],IfThenElse (Op Or [Op Sub [Constant 4,Op Mul [Constant 6,Constant 9]],Var "y"]) ("x" := Op Add [Op Or [Op Sub [Var "x",Var "x"],Op Eq [Op Add [Var "x",Constant (-9)],Var "x"]],Op Neg [Var "x"]]) (Print (Op And [Op Or [Var "x",Op Or [Op Leq [Var "x",Constant (-1)],Op Eq [Constant 6,Constant 4]]],Op Leq [Var "y",Constant (-3)]]))]) (IfThenElse (Op Geq [Op And [Op Neg [Constant 0],Op And [Constant 1,Var "y"]],Constant 5]) (IfThenElse (Op Or [Op Mul [Constant 3,Var "x"],Constant (-10)]) ("y" := Op And [Op Greater [Constant (-6),Op Mul [Constant (-9),Var "x"]],Op Mul [Var "x",Op Sub [Var "y",Var "y"]]]) (Print (Op Or [Op Geq [Constant (-7),Constant (-3)],Op Mul [Op Mul [Op Add [Constant 3,Var "y"],Var "y"],Op Not [Var "x"]]]))) (Block ["rl" := Constant 3,While (Var "rl") (Block ["y" := Op Sub [Var "y",Op Eq [Var "y",Op Leq [Var "y",Constant (-6)]]],"rl" := Op Sub [Var "rl",Constant 1]])])))],[("e",-6),("f",-6),("g",-9),("h",-10),("i",-4),("j",7),("k",1),("l",7),("m",-4),("n",1),("o",-1),("p",9),("q",-4),("r",6),("s",-10),("t",6),("u",3),("v",-6),("w",-9),("x",4),("y",-2),("z",-1),("a",-7),("b",-3),("c",2),("d",-7)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Or [Var "x",Constant (-10)]) (Block [Print (Constant 0),Block ["f" := Constant 10,While (Var "f") (Block [Print (Op Or [Op Less [Op Mul [Op Less [Var "x",Constant (-2)],Op Or [Var "x",Var "y"]],Var "f"],Op Geq [Constant (-5),Var "y"]]),"f" := Op Sub [Var "f",Constant 1]])],"x" := Op Greater [Var "y",Op And [Op Geq [Op Geq [Constant 2,Constant (-1)],Constant (-3)],Constant 5]],Block [Print (Op And [Op Less [Op Greater [Constant 1,Op And [Var "y",Constant (-1)]],Op And [Var "y",Var "y"]],Var "y"]),IfThenElse (Op Eq [Op Geq [Op Greater [Var "y",Op Neg [Constant (-6)]],Op Mul [Op Not [Constant (-8)],Var "x"]],Op Leq [Constant 1,Var "x"]]) ("y" := Constant (-4)) ("y" := Var "x")],Block [Block ["jl" := Constant 10,While (Var "jl") (Block ["y" := Constant 10,"jl" := Op Sub [Var "jl",Constant 1]])],"y" := Op Mul [Op Leq [Constant 2,Op Not [Op Or [Constant (-5),Var "y"]]],Op Leq [Op Not [Constant 8],Op Add [Op Add [Constant 6,Constant (-6)],Var "y"]]]]]) (Block ["q" := Constant 0,While (Var "q") (Block [Print (Op Greater [Op Or [Op Geq [Constant 6,Constant 2],Constant 0],Op Leq [Constant (-3),Constant (-7)]]),"q" := Op Sub [Var "q",Constant 1]])])],[("j",9),("k",-8),("l",-3),("m",-3),("n",10),("o",-7),("p",-7),("q",7),("r",-4),("s",3),("t",-9),("u",-4),("v",-9),("w",8),("x",2),("y",10),("z",5),("a",4),("b",-8),("c",4),("d",6),("e",5),("f",3),("g",-4),("h",8),("i",-6)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["r" := Constant 9,While (Var "r") (Block [Print (Op Or [Op Sub [Op Not [Op Eq [Constant (-1),Var "r"]],Constant 4],Op Or [Var "r",Constant (-10)]]),"r" := Op Sub [Var "r",Constant 1]])]],[("i",8),("j",-8),("k",8),("l",8),("m",5),("n",7),("o",10),("p",7),("q",-10),("r",1),("s",5),("t",-10),("u",4),("v",4),("w",-7),("x",8),("y",-7),("z",10),("a",-2),("b",5),("c",5),("d",-5),("e",-1),("f",-9),("g",-9),("h",6)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [Block [Print (Op Mul [Op Add [Op Leq [Var "y",Op Greater [Constant 6,Var "x"]],Op And [Constant (-1),Var "y"]],Op Neg [Var "y"]]),Block ["ol" := Constant 6,While (Var "ol") (Block [Print (Op Sub [Op Neg [Op Sub [Var "ol",Op Or [Var "ol",Constant 3]]],Op Or [Op Mul [Op Eq [Constant 2,Var "y"],Constant 3],Op And [Constant 0,Op Not [Constant 2]]]]),"ol" := Op Sub [Var "ol",Constant 1]])],Block ["fl" := Constant 3,While (Var "fl") (Block ["x" := Op Leq [Op Less [Var "fl",Op Less [Constant (-4),Constant 5]],Op Neg [Var "fl"]],"fl" := Op Sub [Var "fl",Constant 1]])],IfThenElse (Op Not [Constant (-8)]) ("y" := Op Greater [Var "x",Op Geq [Op Mul [Op Geq [Var "y",Var "x"],Constant 10],Var "x"]]) (IfThenElse (Var "y") ("x" := Op Eq [Constant (-3),Constant (-3)]) (Print (Op Sub [Op Sub [Var "x",Op Neg [Op Not [Constant (-5)]]],Op Geq [Op Leq [Var "y",Op Eq [Var "x",Constant (-8)]],Constant 2]]))),Print (Op Greater [Op Mul [Op Not [Var "y"],Var "x"],Op Greater [Op Not [Op And [Var "x",Constant 6]],Op Neg [Constant (-8)]]])],IfThenElse (Op Not [Var "y"]) ("x" := Op Neg [Op And [Op Or [Constant 7,Var "y"],Op Geq [Var "x",Op Geq [Var "x",Var "y"]]]]) (Block ["l" := Constant 3,While (Var "l") (Block ["y" := Op Greater [Op And [Op Or [Constant 2,Constant 1],Op Mul [Op Not [Constant (-8)],Var "y"]],Op Greater [Op Less [Var "x",Constant 9],Op Not [Op Sub [Var "l",Constant (-4)]]]],"l" := Op Sub [Var "l",Constant 1]])]),"y" := Op Greater [Op Geq [Op Less [Constant (-7),Op Geq [Constant 10,Var "x"]],Constant (-5)],Constant 3],IfThenElse (Op Mul [Op Less [Var "x",Var "x"],Constant 9]) (Block ["il" := Constant 6,While (Var "il") (Block [Print (Op Eq [Op Leq [Op Neg [Op Less [Var "x",Var "y"]],Var "x"],Op Neg [Var "y"]]),"il" := Op Sub [Var "il",Constant 1]])]) (Block [Block ["sl" := Constant 10,While (Var "sl") (Block ["x" := Op Neg [Var "sl"],"sl" := Op Sub [Var "sl",Constant 1]])],IfThenElse (Op Greater [Op And [Var "x",Op Not [Constant (-10)]],Op Eq [Var "x",Op Leq [Var "x",Op Mul [Var "y",Var "y"]]]]) ("y" := Var "y") (Print (Constant 7))]),IfThenElse (Constant 6) (Block [Print (Op Leq [Var "y",Op And [Var "y",Constant (-7)]]),IfThenElse (Op Add [Op Add [Var "y",Constant 5],Constant 10]) ("y" := Constant (-7)) ("y" := Op Sub [Op Less [Constant 7,Constant 8],Op Add [Var "y",Op Eq [Var "y",Constant (-8)]]])]) (Print (Op Mul [Op And [Constant 8,Op Geq [Op And [Var "x",Var "y"],Var "x"]],Op Less [Var "y",Op Leq [Constant 2,Var "y"]]]))]],[("l",8),("m",-3),("n",3),("o",2),("p",-10),("q",-6),("r",-10),("s",6),("t",-6),("u",10),("v",3),("w",-6),("x",-9),("y",-2),("z",8),("a",-9),("b",-9),("c",7),("d",1),("e",-10),("f",-1),("g",9),("h",6),("i",-5),("j",-7),("k",0)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [Block [Block [IfThenElse (Var "x") (Print (Op Eq [Op Geq [Op Geq [Var "y",Var "x"],Var "x"],Op Or [Op Eq [Op Geq [Var "x",Constant (-3)],Var "x"],Op Mul [Op Sub [Var "x",Constant 7],Var "y"]]])) (Print (Op Mul [Var "x",Constant 7])),Print (Op Less [Op Greater [Op Sub [Op Mul [Var "y",Var "x"],Constant (-7)],Op And [Constant (-10),Constant (-9)]],Var "x"])],IfThenElse (Op Leq [Var "x",Op Not [Var "x"]]) (IfThenElse (Op Geq [Op Less [Var "x",Op Sub [Op Mul [Var "y",Var "y"],Constant (-8)]],Op Neg [Op Mul [Constant 2,Op Not [Constant 2]]]]) ("y" := Op Sub [Op Mul [Op Sub [Constant 2,Op Add [Constant 5,Constant (-6)]],Var "y"],Constant (-9)]) (Print (Var "x"))) (Block ["x" := Op Less [Op Less [Op Leq [Var "x",Op Leq [Constant (-10),Var "y"]],Var "y"],Op And [Op Or [Op Neg [Constant 4],Constant 1],Op Less [Var "y",Op Mul [Constant 8,Constant (-4)]]]]]),Block [IfThenElse (Op Mul [Constant (-10),Op Mul [Op Neg [Constant 5],Var "x"]]) ("y" := Op Geq [Constant (-7),Op Not [Var "x"]]) ("y" := Var "y"),Block ["v" := Constant 8,While (Var "v") (Block ["x" := Op Leq [Op And [Constant 2,Op Sub [Op Geq [Var "x",Constant 0],Constant (-6)]],Op Not [Op Or [Var "v",Op And [Var "x",Var "y"]]]],"v" := Op Sub [Var "v",Constant 1]])]],Block [Block ["x" := Op Eq [Op Or [Constant 10,Var "x"],Var "y"]],"y" := Constant 2],IfThenElse (Op Sub [Op Geq [Op And [Var "y",Constant 0],Op Less [Constant (-6),Var "y"]],Op Mul [Op Add [Var "y",Op Or [Var "y",Var "x"]],Constant (-9)]]) (Block ["hl" := Constant 5,While (Var "hl") (Block ["x" := Op Greater [Op Leq [Op Geq [Constant (-4),Constant (-1)],Var "x"],Op Sub [Op Geq [Constant 1,Constant 10],Op Or [Constant (-9),Var "y"]]],"hl" := Op Sub [Var "hl",Constant 1]])]) (Block [Print (Op Less [Op And [Op Less [Var "y",Op Or [Var "x",Constant 4]],Var "x"],Op Eq [Constant 9,Op Mul [Op Or [Constant 2,Var "x"],Constant 8]]])])],Block ["y" := Constant 3,While (Var "y") (Block ["x" := Op Neg [Op Or [Op Not [Var "x"],Op Add [Constant (-4),Op Leq [Var "y",Constant 4]]]],"y" := Op Sub [Var "y",Constant 1]])],Block ["h" := Constant 10,While (Var "h") (Block ["x" := Op Neg [Op Or [Op Add [Var "x",Constant (-10)],Op Or [Constant 8,Constant 4]]],"h" := Op Sub [Var "h",Constant 1]])],"x" := Op Greater [Op Geq [Var "x",Var "y"],Op Less [Op Add [Op Or [Var "y",Var "x"],Var "y"],Constant (-8)]],IfThenElse (Var "y") ("y" := Op Or [Op And [Constant (-5),Var "x"],Constant 1]) (IfThenElse (Op And [Op Not [Constant 6],Op Not [Op Or [Var "x",Var "x"]]]) (IfThenElse (Op Sub [Op Add [Op Geq [Var "y",Constant (-7)],Op Greater [Var "x",Constant 6]],Op Or [Op Less [Var "x",Constant (-5)],Op And [Constant 1,Var "x"]]]) (Print (Op Add [Var "y",Op Leq [Var "x",Op Less [Op Less [Constant 4,Constant (-9)],Var "x"]]])) (Print (Op Less [Var "x",Constant (-4)]))) (IfThenElse (Op Mul [Constant 4,Op Or [Var "x",Var "x"]]) ("y" := Op Sub [Constant 6,Op Add [Constant (-5),Constant (-10)]]) ("y" := Op Geq [Constant (-6),Constant 7])))]],[("x",-3),("y",9),("z",-8),("a",4),("b",1),("c",10),("d",9),("e",1),("f",1),("g",4),("h",-7),("i",1),("j",-7),("k",8),("l",-6),("m",-3),("n",-2),("o",8),("p",-9),("q",7),("r",7),("s",1),("t",-4),("u",3),("v",-10),("w",-1)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [Block ["d" := Constant 8,While (Var "d") (Block [Print (Constant (-10)),"d" := Op Sub [Var "d",Constant 1]])],Block [Block ["x" := Constant 3,While (Var "x") (Block ["y" := Op Less [Op Sub [Op Sub [Op Or [Constant (-6),Var "y"],Constant 0],Var "x"],Op And [Constant 0,Var "x"]],"x" := Op Sub [Var "x",Constant 1]])],IfThenElse (Op Not [Var "y"]) (Block [Print (Constant 4)]) (Block ["yl" := Constant 6,While (Var "yl") (Block ["y" := Op Geq [Op Eq [Op Sub [Constant 9,Var "x"],Op Add [Constant 1,Op And [Constant (-1),Constant 7]]],Var "x"],"yl" := Op Sub [Var "yl",Constant 1]])]),"y" := Constant (-4),Block [IfThenElse (Op Eq [Op Geq [Var "y",Op Greater [Op Or [Constant (-2),Var "y"],Var "x"]],Var "x"]) ("y" := Op Not [Op Sub [Constant (-5),Op Eq [Op Geq [Constant (-10),Var "y"],Var "y"]]]) ("y" := Op Less [Op Less [Op And [Op Not [Constant (-2)],Var "y"],Op Neg [Op Neg [Var "x"]]],Op Geq [Op Less [Op Sub [Constant (-10),Constant 9],Var "y"],Op Mul [Constant (-8),Var "x"]]]),Block [Print (Op Not [Op Less [Op Geq [Var "x",Constant 7],Constant 7]])]],Print (Op Eq [Op And [Op And [Op Less [Constant 1,Constant (-4)],Constant 0],Var "y"],Op Mul [Constant 7,Op Mul [Op Geq [Constant (-8),Constant 8],Var "y"]]])],Block ["c" := Constant 7,While (Var "c") (Block ["y" := Op Neg [Op And [Var "c",Var "y"]],"c" := Op Sub [Var "c",Constant 1]])],Block [IfThenElse (Op Neg [Op And [Var "x",Op Or [Constant (-6),Constant 5]]]) (Block [Print (Op Leq [Var "y",Op Or [Var "y",Op Or [Constant (-9),Var "y"]]])]) ("x" := Op Or [Op Add [Op Mul [Var "x",Var "x"],Constant 5],Op And [Var "x",Op Geq [Op Or [Var "y",Constant 1],Constant 4]]]),"x" := Op Less [Constant (-8),Op Not [Var "x"]],Block [Print (Op Add [Op Less [Constant (-10),Var "x"],Var "x"]),Block [Print (Op And [Op Or [Var "y",Op Mul [Var "y",Op Neg [Var "x"]]],Op Eq [Op Neg [Var "y"],Op Geq [Op Neg [Var "x"],Constant (-9)]]])]],Block [Print (Op Less [Var "y",Op Not [Op Leq [Var "x",Constant (-9)]]]),Block ["x" := Op Eq [Var "x",Var "y"]]],"x" := Op And [Op Sub [Op Greater [Var "y",Op Mul [Var "y",Var "x"]],Op Leq [Var "x",Op Or [Constant (-10),Constant (-9)]]],Op And [Var "x",Op Or [Op Greater [Constant (-4),Var "y"],Var "y"]]]],Block ["o" := Constant 6,While (Var "o") (Block [Print (Op Sub [Var "y",Op Neg [Constant 4]]),"o" := Op Sub [Var "o",Constant 1]])]]],[("i",3),("j",-10),("k",-8),("l",2),("m",1),("n",0),("o",9),("p",-3),("q",-9),("r",4),("s",8),("t",-9),("u",-1),("v",-4),("w",-6),("x",0),("y",-8),("z",8),("a",3),("b",-2),("c",9),("d",10),("e",-9),("f",-1),("g",8),("h",1)])]
func_runHelper_out = [([("x",1),("y",1),("z",0),("a",0),("b",0),("c",0),("d",0),("e",0),("f",0),("g",0),("h",0),("i",0),("j",0),("k",0),("l",0),("m",0),("n",0),("o",0),("p",0),("q",0),("r",0),("s",0),("t",0),("u",0),("v",0),("w",0)],[0]),([("s",-1),("t",-1),("u",1),("v",1),("w",1),("x",1),("y",1),("z",-1),("a",1),("b",1),("c",-1),("d",-1),("e",-1),("f",-1),("g",1),("h",-1),("i",-1),("j",1),("k",-1),("l",0),("m",0),("n",1),("o",-1),("p",-1),("q",-1),("r",1)],[]),([("e",2),("f",-2),("g",0),("h",0),("i",0),("j",-1),("k",-1),("l",-1),("m",1),("n",1),("o",-1),("p",-2),("q",-2),("r",-1),("s",1),("t",1),("u",1),("v",2),("w",-1),("x",1),("y",2),("z",-2),("a",0),("b",-1),("c",0),("d",0),("el",0)],[2]),([("g",2),("h",0),("i",-1),("j",2),("k",1),("l",0),("m",3),("n",-1),("o",-3),("p",2),("q",-3),("r",-2),("s",-3),("t",-2),("u",-3),("v",1),("w",-2),("x",1),("y",1),("z",-3),("a",1),("b",2),("c",-1),("d",-3),("e",0),("f",2)],[2,0,2]),([("x",1),("y",-3),("z",3),("a",2),("b",-1),("c",0),("d",-4),("e",-2),("f",2),("g",-4),("h",4),("i",3),("j",3),("k",-1),("l",1),("m",-3),("n",2),("o",-3),("p",1),("q",-1),("r",0),("s",-1),("t",4),("u",1),("v",2),("w",1)],[1,1]),([("r",2),("s",4),("t",4),("u",-5),("v",4),("w",0),("x",1),("y",0),("z",-3),("a",1),("b",-3),("c",-1),("d",0),("e",-5),("f",5),("g",3),("h",0),("i",1),("j",-5),("k",1),("l",4),("m",-3),("n",1),("o",-2),("p",0),("q",0),("ul",0)],[-9,2,0,1]),([("j",-2),("k",5),("l",-2),("m",0),("n",-1),("o",2),("p",3),("q",-4),("r",6),("s",4),("t",1),("u",-4),("v",-2),("w",0),("x",1),("y",0),("z",6),("a",-5),("b",-4),("c",-5),("d",4),("e",2),("f",-2),("g",-4),("h",6),("i",-6),("rl",0)],[]),([("l",-6),("m",0),("n",-7),("o",3),("p",-7),("q",5),("r",-2),("s",6),("t",3),("u",7),("v",5),("w",-3),("x",1),("y",2),("z",2),("a",2),("b",-3),("c",1),("d",7),("e",6),("f",-5),("g",-1),("h",6),("i",-7),("j",-7),("k",-2),("tl",0),("sl",0)],[0,0,0,1,0,1,1,1,1]),([("o",-8),("p",-3),("q",-4),("r",-7),("s",3),("t",-7),("u",3),("v",-5),("w",3),("x",1),("y",1),("z",-3),("a",-7),("b",-5),("c",8),("d",-8),("e",5),("f",-7),("g",0),("h",0),("i",-1),("j",5),("k",-6),("l",0),("m",5),("n",4)],[-1,-1]),([("b",6),("c",1),("d",-4),("e",1),("f",2),("g",5),("h",4),("i",0),("j",-3),("k",-3),("l",-6),("m",-4),("n",7),("o",2),("p",3),("q",-3),("r",-4),("s",6),("t",1),("u",1),("v",-5),("w",2),("x",1),("y",0),("z",3),("a",3),("fl",0),("ol",0)],[0,0,0,0,0,1,0,1,1,0]),([("h",6),("i",-4),("j",5),("k",4),("l",6),("m",-7),("n",1),("o",-5),("p",-10),("q",1),("r",8),("s",7),("t",-6),("u",3),("v",10),("w",10),("x",1),("y",1),("z",-3),("a",-1),("b",7),("c",-7),("d",-2),("e",0),("f",1),("g",-2),("el",0)],[0,0]),([("b",-1),("c",-8),("d",9),("e",-9),("f",7),("g",8),("h",9),("i",4),("j",-4),("k",9),("l",-5),("m",-8),("n",-10),("o",-4),("p",-6),("q",-6),("r",-4),("s",7),("t",10),("u",6),("v",10),("w",4),("x",1),("y",1),("z",-6),("a",6),("cl",0)],[1,1,1,1,1,1,1,1,1,1]),([("x",0),("y",1),("z",-7),("a",0),("b",-1),("c",-8),("d",-1),("e",1),("f",-4),("g",-9),("h",6),("i",-3),("j",0),("k",0),("l",-3),("m",-2),("n",-1),("o",0),("p",5),("q",-9),("r",9),("s",-3),("t",8),("u",-2),("v",-7),("w",8)],[]),([("k",-4),("l",-1),("m",6),("n",2),("o",-1),("p",-1),("q",6),("r",-2),("s",0),("t",3),("u",8),("v",-10),("w",-1),("x",1),("y",4),("z",-6),("a",1),("b",-7),("c",3),("d",0),("e",-6),("f",-10),("g",9),("h",1),("i",3),("j",-4)],[]),([("a",-3),("b",-2),("c",3),("d",-8),("e",-9),("f",-8),("g",6),("h",8),("i",-7),("j",-2),("k",-6),("l",-5),("m",5),("n",-1),("o",7),("p",-8),("q",-5),("r",-9),("s",-5),("t",-2),("u",-6),("v",-6),("w",-2),("x",1),("y",1),("z",10),("fl",0)],[-1,-1,-1,-1]),([("e",-6),("f",-6),("g",-9),("h",-10),("i",-4),("j",7),("k",1),("l",7),("m",-4),("n",1),("o",-1),("p",9),("q",-4),("r",6),("s",-10),("t",6),("u",3),("v",-6),("w",-9),("x",0),("y",1),("z",-1),("a",-7),("b",-3),("c",2),("d",-7)],[]),([("j",9),("k",-8),("l",-3),("m",-3),("n",10),("o",-7),("p",-7),("q",7),("r",-4),("s",3),("t",-9),("u",-4),("v",-9),("w",8),("x",0),("y",0),("z",5),("a",4),("b",-8),("c",4),("d",6),("e",5),("f",0),("g",-4),("h",8),("i",-6),("jl",0)],[0,1,1,1,1,1,1,1,1,1,1,1]),([("i",8),("j",-8),("k",8),("l",8),("m",5),("n",7),("o",10),("p",7),("q",-10),("r",0),("s",5),("t",-10),("u",4),("v",4),("w",-7),("x",1),("y",1),("z",10),("a",-2),("b",5),("c",5),("d",-5),("e",-1),("f",-9),("g",-9),("h",6)],[1,1,1,1,1,1,1,1,1]),([("l",0),("m",-3),("n",3),("o",2),("p",-10),("q",-6),("r",-10),("s",6),("t",-6),("u",10),("v",3),("w",-6),("x",-1),("y",-7),("z",8),("a",-9),("b",-9),("c",7),("d",1),("e",-10),("f",-1),("g",9),("h",6),("i",-5),("j",-7),("k",0),("ol",0),("fl",0),("sl",0)],[-2,-5,-4,-3,-2,-1,0,0,7,1]),([("x",0),("y",0),("z",-8),("a",4),("b",1),("c",10),("d",9),("e",1),("f",1),("g",4),("h",0),("i",1),("j",-7),("k",8),("l",-6),("m",-3),("n",-2),("o",8),("p",-9),("q",7),("r",7),("s",1),("t",-4),("u",3),("v",0),("w",-1),("hl",0)],[1,0]),([("i",3),("j",-10),("k",-8),("l",2),("m",1),("n",0),("o",0),("p",-3),("q",-9),("r",4),("s",8),("t",-9),("u",-1),("v",-4),("w",-6),("x",0),("y",0),("z",8),("a",3),("b",-2),("c",0),("d",0),("e",-9),("f",-1),("g",8),("h",1)],[-10,-10,-10,-10,-10,-10,-10,-10,4,0,1,2,0,1,4,4,4,4,4,4])]

-- Inputs and correct outputs for func_convertStore
func_convertStore_in = [([("m",0),("n",0),("o",0),("p",0),("q",0),("r",0),("s",0),("t",0),("u",0),("v",0),("w",0),("x",0),("y",0),("z",0),("a",0),("b",0),("c",0),("d",0),("e",0),("f",0),("g",0),("h",0),("i",0),("j",0),("k",0),("l",0)],"v"),([("a",0),("b",0),("c",-1),("d",-1),("e",-1),("f",0),("g",0),("h",1),("i",0),("j",-1),("k",0),("l",1),("m",1),("n",0),("o",1),("p",0),("q",-1),("r",-1),("s",-1),("t",0),("u",1),("v",-1),("w",-1),("x",1),("y",-1),("z",0)],"l"),([("o",0),("p",1),("q",0),("r",0),("s",-2),("t",2),("u",2),("v",-2),("w",1),("x",-1),("y",-2),("z",1),("a",0),("b",-1),("c",-2),("d",-2),("e",2),("f",1),("g",-2),("h",-1),("i",-1),("j",1),("k",2),("l",-1),("m",0),("n",-2)],"k"),([("h",1),("i",2),("j",0),("k",-2),("l",1),("m",0),("n",2),("o",-2),("p",0),("q",2),("r",-1),("s",0),("t",-2),("u",2),("v",2),("w",3),("x",1),("y",-3),("z",-3),("a",-3),("b",3),("c",-1),("d",2),("e",0),("f",0),("g",1)],"y"),([("l",3),("m",-1),("n",-2),("o",0),("p",2),("q",-3),("r",3),("s",3),("t",4),("u",-2),("v",-3),("w",-3),("x",-1),("y",-4),("z",-2),("a",-4),("b",0),("c",3),("d",-4),("e",-2),("f",0),("g",-3),("h",-3),("i",-4),("j",-3),("k",-3)],"q"),([("a",-3),("b",-3),("c",4),("d",4),("e",3),("f",1),("g",-3),("h",1),("i",-1),("j",-5),("k",2),("l",-5),("m",1),("n",-5),("o",-3),("p",4),("q",1),("r",-2),("s",0),("t",-2),("u",5),("v",1),("w",0),("x",-1),("y",-2),("z",-1)],"b"),([("z",-1),("a",-2),("b",-4),("c",4),("d",-5),("e",5),("f",3),("g",-6),("h",-3),("i",-5),("j",2),("k",-5),("l",0),("m",-2),("n",3),("o",4),("p",-1),("q",-1),("r",0),("s",-1),("t",6),("u",-6),("v",4),("w",-5),("x",-2),("y",0)],"q"),([("r",-4),("s",-7),("t",-4),("u",-1),("v",5),("w",3),("x",-7),("y",4),("z",-1),("a",0),("b",4),("c",-5),("d",2),("e",2),("f",-4),("g",-1),("h",-7),("i",6),("j",-5),("k",-4),("l",-7),("m",1),("n",-5),("o",3),("p",5),("q",7)],"d"),([("j",2),("k",2),("l",3),("m",-1),("n",6),("o",3),("p",0),("q",-2),("r",1),("s",6),("t",-8),("u",1),("v",5),("w",7),("x",-4),("y",-4),("z",8),("a",0),("b",-6),("c",2),("d",4),("e",0),("f",0),("g",7),("h",3),("i",-6)],"w"),([("b",1),("c",-2),("d",5),("e",-3),("f",3),("g",-6),("h",0),("i",6),("j",-6),("k",8),("l",-5),("m",1),("n",-6),("o",-8),("p",9),("q",9),("r",4),("s",5),("t",5),("u",-5),("v",5),("w",4),("x",3),("y",5),("z",-6),("a",5)],"q"),([("c",-9),("d",1),("e",-7),("f",-5),("g",-3),("h",-8),("i",-2),("j",5),("k",9),("l",9),("m",10),("n",-2),("o",-8),("p",0),("q",4),("r",5),("s",5),("t",-4),("u",2),("v",5),("w",-7),("x",-7),("y",1),("z",8),("a",-7),("b",-9)],"h"),([("w",5),("x",4),("y",3),("z",5),("a",3),("b",2),("c",3),("d",-9),("e",7),("f",4),("g",-10),("h",-4),("i",-3),("j",-2),("k",4),("l",-8),("m",-5),("n",-7),("o",1),("p",-2),("q",0),("r",2),("s",6),("t",-5),("u",3),("v",10)],"q"),([("t",-9),("u",-6),("v",6),("w",-10),("x",-4),("y",1),("z",2),("a",7),("b",10),("c",2),("d",7),("e",-9),("f",5),("g",-8),("h",8),("i",-5),("j",-8),("k",10),("l",5),("m",8),("n",-7),("o",5),("p",-2),("q",-8),("r",-6),("s",3)],"o"),([("d",7),("e",-10),("f",6),("g",7),("h",-6),("i",-7),("j",-5),("k",-8),("l",2),("m",10),("n",9),("o",1),("p",-4),("q",5),("r",10),("s",0),("t",5),("u",1),("v",9),("w",9),("x",-10),("y",1),("z",-1),("a",-7),("b",-9),("c",-7)],"x"),([("z",1),("a",-9),("b",9),("c",-3),("d",-6),("e",7),("f",4),("g",-2),("h",2),("i",-5),("j",0),("k",2),("l",-10),("m",3),("n",8),("o",-1),("p",3),("q",-3),("r",6),("s",5),("t",2),("u",1),("v",4),("w",-1),("x",-4),("y",-1)],"i"),([("y",-1),("z",7),("a",4),("b",10),("c",-5),("d",-10),("e",7),("f",1),("g",9),("h",6),("i",6),("j",6),("k",4),("l",10),("m",-6),("n",9),("o",-8),("p",6),("q",-5),("r",-3),("s",2),("t",-5),("u",8),("v",-7),("w",3),("x",-8)],"a"),([("j",2),("k",1),("l",-7),("m",10),("n",-7),("o",-10),("p",-7),("q",9),("r",0),("s",10),("t",0),("u",8),("v",-4),("w",2),("x",-3),("y",-9),("z",-1),("a",-5),("b",1),("c",-8),("d",-1),("e",6),("f",-7),("g",-10),("h",9),("i",1)],"y"),([("t",6),("u",-8),("v",-4),("w",-9),("x",3),("y",4),("z",0),("a",-6),("b",3),("c",2),("d",0),("e",-3),("f",-5),("g",-4),("h",10),("i",4),("j",-5),("k",10),("l",8),("m",0),("n",-8),("o",-2),("p",10),("q",-6),("r",10),("s",-7)],"j"),([("v",10),("w",3),("x",0),("y",8),("z",0),("a",0),("b",4),("c",-9),("d",-6),("e",-10),("f",-4),("g",9),("h",3),("i",10),("j",-7),("k",7),("l",5),("m",-6),("n",10),("o",-10),("p",3),("q",-10),("r",7),("s",-4),("t",-7),("u",7)],"t"),([("b",3),("c",-2),("d",0),("e",-2),("f",-5),("g",6),("h",2),("i",7),("j",9),("k",-4),("l",-4),("m",4),("n",-7),("o",0),("p",0),("q",1),("r",0),("s",5),("t",5),("u",-2),("v",0),("w",0),("x",-3),("y",0),("z",10),("a",-9)],"u"),([("a",-2),("b",-2),("c",10),("d",-8),("e",9),("f",-4),("g",-5),("h",1),("i",-6),("j",9),("k",9),("l",5),("m",10),("n",7),("o",0),("p",-8),("q",-3),("r",6),("s",-6),("t",-7),("u",-3),("v",-1),("w",-4),("x",3),("y",-6),("z",8)],"y")]
func_convertStore_out = [0,1,2,-3,-3,-3,-1,2,7,9,-8,0,5,-10,-5,4,-9,-5,-7,-2,-6]

-- Inputs and correct outputs for func_runHelper'
func_runHelper'_in = [(Block ["x" := Constant 1,"y" := Constant 1,Print (Constant 0)],[("w",0),("x",0),("y",0),("z",0),("a",0),("b",0),("c",0),("d",0),("e",0),("f",0),("g",0),("h",0),("i",0),("j",0),("k",0),("l",0),("m",0),("n",0),("o",0),("p",0),("q",0),("r",0),("s",0),("t",0),("u",0),("v",0)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["y" := Constant (-1)]],[("f",1),("g",0),("h",1),("i",1),("j",-1),("k",1),("l",1),("m",1),("n",1),("o",1),("p",-1),("q",-1),("r",-1),("s",-1),("t",0),("u",0),("v",1),("w",1),("x",-1),("y",-1),("z",-1),("a",0),("b",0),("c",-1),("d",1),("e",-1)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Var "y") (Print (Constant 0)) (IfThenElse (Op Not [Constant (-1)]) ("y" := Constant 2) ("x" := Var "y"))],[("w",-2),("x",0),("y",-1),("z",0),("a",-1),("b",0),("c",2),("d",2),("e",2),("f",0),("g",1),("h",-2),("i",-2),("j",2),("k",0),("l",1),("m",-2),("n",1),("o",0),("p",1),("q",0),("r",0),("s",-1),("t",0),("u",-2),("v",0)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["z" := Constant 0,While (Var "z") (Block ["y" := Op Add [Constant 0,Var "x"],"z" := Op Sub [Var "z",Constant 1]])]],[("w",0),("x",2),("y",-3),("z",3),("a",0),("b",2),("c",0),("d",-2),("e",2),("f",2),("g",3),("h",-1),("i",2),("j",3),("k",-2),("l",-1),("m",1),("n",1),("o",1),("p",1),("q",2),("r",-3),("s",-3),("t",3),("u",-3),("v",-3)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["l" := Constant 3,While (Var "l") (Block ["x" := Constant 0,"l" := Op Sub [Var "l",Constant 1]])]],[("p",-2),("q",0),("r",-1),("s",-2),("t",-2),("u",2),("v",-1),("w",3),("x",4),("y",-4),("z",-1),("a",0),("b",3),("c",1),("d",-3),("e",4),("f",-3),("g",-3),("h",-2),("i",0),("j",-1),("k",-1),("l",-1),("m",1),("n",0),("o",1)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [Print (Op Geq [Op Or [Constant (-4),Var "x"],Constant (-3)]),"x" := Op Mul [Op Greater [Var "y",Var "y"],Constant (-4)],Block [IfThenElse (Var "y") (Print (Op Less [Op Mul [Var "y",Var "x"],Var "y"])) (Print (Op Leq [Var "y",Op Neg [Op Add [Constant 1,Constant (-3)]]])),"y" := Op Eq [Op Not [Var "y"],Op Eq [Var "y",Constant 2]]],Block ["vl" := Constant 1,While (Var "vl") (Block ["y" := Op Eq [Var "y",Op Mul [Constant (-3),Var "y"]],"vl" := Op Sub [Var "vl",Constant 1]])],"x" := Op And [Op Mul [Op Neg [Var "x"],Op Or [Var "y",Var "y"]],Var "y"]]],[("y",-5),("z",4),("a",-5),("b",3),("c",-4),("d",5),("e",-5),("f",3),("g",2),("h",3),("i",3),("j",0),("k",-3),("l",2),("m",-5),("n",-3),("o",-4),("p",-3),("q",-2),("r",-5),("s",5),("t",-3),("u",3),("v",2),("w",1),("x",-5)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["ul" := Constant 5,While (Var "ul") (Block ["y" := Constant 0,"ul" := Op Sub [Var "ul",Constant 1]])]],[("o",-6),("p",4),("q",-5),("r",0),("s",1),("t",2),("u",-2),("v",3),("w",4),("x",-2),("y",4),("z",-3),("a",-5),("b",2),("c",6),("d",1),("e",-1),("f",4),("g",-5),("h",-6),("i",-5),("j",4),("k",5),("l",1),("m",-2),("n",-5)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["y" := Constant 3,While (Var "y") (Block [Print (Op Sub [Var "y",Op And [Constant 4,Var "y"]]),"y" := Op Sub [Var "y",Constant 1]])]],[("i",4),("j",3),("k",6),("l",0),("m",4),("n",6),("o",4),("p",7),("q",4),("r",2),("s",2),("t",1),("u",2),("v",1),("w",4),("x",-6),("y",5),("z",6),("a",5),("b",3),("c",3),("d",-7),("e",3),("f",3),("g",3),("h",2)]),(Block ["x" := Constant 1,"y" := Constant 1,"y" := Op Geq [Op Not [Op Or [Var "y",Var "x"]],Var "y"]],[("g",1),("h",2),("i",1),("j",3),("k",2),("l",0),("m",3),("n",-2),("o",-5),("p",-3),("q",8),("r",-1),("s",1),("t",3),("u",3),("v",-8),("w",-3),("x",3),("y",-4),("z",4),("a",-6),("b",-8),("c",1),("d",7),("e",2),("f",3)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Eq [Op Not [Var "y"],Constant 7]) ("x" := Op Geq [Constant 3,Op Leq [Op Mul [Var "y",Op Sub [Var "y",Var "x"]],Constant 8]]) (IfThenElse (Op Or [Var "y",Op Sub [Constant (-1),Constant (-7)]]) (Block [Block ["x" := Op Or [Op Or [Op Add [Constant 3,Op Mul [Constant 1,Var "x"]],Op Eq [Constant (-8),Constant 4]],Constant (-4)]],Print (Op Not [Op Or [Op Less [Var "x",Constant (-6)],Op Geq [Var "y",Var "y"]]])]) (IfThenElse (Op And [Op Neg [Var "x"],Op Eq [Var "y",Var "x"]]) (Block [Print (Op Eq [Op And [Var "y",Constant 8],Constant (-4)])]) (Print (Op And [Op And [Constant 5,Op Greater [Op Not [Var "y"],Constant 0]],Op Mul [Constant 6,Constant 2]]))))],[("a",8),("b",8),("c",-5),("d",8),("e",7),("f",-7),("g",9),("h",2),("i",4),("j",7),("k",4),("l",-4),("m",7),("n",1),("o",7),("p",-8),("q",3),("r",9),("s",4),("t",4),("u",0),("v",3),("w",-2),("x",8),("y",6),("z",3)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["tl" := Constant 9,While (Var "tl") (Block ["y" := Op Neg [Var "x"],"tl" := Op Sub [Var "tl",Constant 1]])]],[("y",10),("z",7),("a",7),("b",-9),("c",-10),("d",8),("e",-9),("f",4),("g",-1),("h",-4),("i",-9),("j",10),("k",-2),("l",6),("m",7),("n",1),("o",8),("p",-5),("q",-10),("r",5),("s",-4),("t",-10),("u",-8),("v",-8),("w",-8),("x",3)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Sub [Op Neg [Op And [Constant 8,Op Add [Constant (-5),Constant 4]]],Op Neg [Var "y"]]) (Block [Block [Block ["x" := Op Or [Op Leq [Op Greater [Var "y",Op Less [Var "y",Var "x"]],Constant 8],Var "x"]],Block ["zl" := Constant 9,While (Var "zl") (Block [Print (Op And [Constant (-1),Op Eq [Op Leq [Var "y",Op Less [Constant (-1),Constant 10]],Op Add [Op Geq [Var "zl",Var "zl"],Var "y"]]]),"zl" := Op Sub [Var "zl",Constant 1]])]],Block ["m" := Constant 7,While (Var "m") (Block [Print (Op Sub [Var "m",Var "m"]),"m" := Op Sub [Var "m",Constant 1]])],Print (Op Greater [Constant 9,Op Greater [Op Sub [Constant 0,Op Greater [Constant (-6),Var "x"]],Constant 5]]),Block [Block ["pl" := Constant 1,While (Var "pl") (Block ["y" := Op Sub [Op Mul [Constant (-10),Op Less [Op Eq [Constant 8,Var "pl"],Op And [Constant 3,Var "pl"]]],Constant 2],"pl" := Op Sub [Var "pl",Constant 1]])],"y" := Op Add [Op Not [Op Eq [Op Leq [Var "x",Constant (-3)],Op Sub [Constant 3,Constant (-4)]]],Constant (-3)]],IfThenElse (Op Greater [Op Sub [Op Mul [Var "y",Var "x"],Constant 7],Var "x"]) (Block [Print (Op Neg [Constant 5])]) (Print (Constant (-9)))]) (Block ["el" := Constant 6,While (Var "el") (Block ["y" := Op Eq [Op Add [Op And [Op Less [Constant 5,Var "y"],Op Geq [Var "el",Var "el"]],Constant (-5)],Op Mul [Op Eq [Op Or [Constant (-1),Constant (-4)],Op Leq [Var "y",Constant (-6)]],Op Not [Var "y"]]],"el" := Op Sub [Var "el",Constant 1]])])],[("q",7),("r",-10),("s",4),("t",9),("u",6),("v",5),("w",5),("x",10),("y",10),("z",-9),("a",-5),("b",-4),("c",-10),("d",-2),("e",-8),("f",3),("g",-2),("h",-9),("i",8),("j",6),("k",-9),("l",9),("m",-4),("n",6),("o",3),("p",2)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Greater [Op Sub [Var "x",Constant 7],Op Less [Op Sub [Op Geq [Constant 0,Var "y"],Var "y"],Var "x"]]) (IfThenElse (Op Eq [Op Leq [Op Neg [Op Sub [Constant 7,Constant 6]],Op Or [Op Neg [Var "x"],Op Eq [Constant (-3),Var "x"]]],Var "x"]) (Print (Op Sub [Op Mul [Op Leq [Op Or [Var "y",Var "y"],Var "x"],Op Or [Var "y",Op And [Var "x",Constant 1]]],Op Sub [Op Mul [Var "y",Op Mul [Var "x",Constant 6]],Op Add [Op Not [Constant (-10)],Constant (-7)]]])) ("x" := Op Neg [Op Add [Constant (-5),Op Eq [Var "x",Constant 3]]])) (Block ["hl" := Constant 3,While (Var "hl") (Block [Print (Constant 9),"hl" := Op Sub [Var "hl",Constant 1]])])],[("r",-2),("s",-8),("t",-9),("u",7),("v",2),("w",-10),("x",8),("y",10),("z",0),("a",-4),("b",-3),("c",-9),("d",5),("e",-5),("f",0),("g",-8),("h",6),("i",-4),("j",-10),("k",-10),("l",-2),("m",-3),("n",-3),("o",-10),("p",2),("q",6)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [Block ["rl" := Constant 6,While (Var "rl") (Block ["x" := Op Sub [Op Mul [Op Leq [Var "rl",Var "rl"],Constant 9],Op Less [Var "y",Op Geq [Var "y",Var "y"]]],"rl" := Op Sub [Var "rl",Constant 1]])],Block [IfThenElse (Op Add [Var "y",Var "y"]) (Block [Print (Op Or [Op Greater [Constant 5,Constant 4],Op Or [Op Mul [Var "x",Var "y"],Constant 9]])]) (Block ["el" := Constant 1,While (Var "el") (Block [Print (Constant 2),"el" := Op Sub [Var "el",Constant 1]])]),Block [Print (Op Or [Constant 4,Op Or [Op Sub [Var "x",Var "y"],Constant (-1)]]),"x" := Op Neg [Op Greater [Op Eq [Var "x",Var "x"],Op Not [Op Greater [Constant (-6),Constant 1]]]]],Block ["y" := Op Geq [Constant 9,Op And [Var "x",Op Or [Op Eq [Constant 4,Var "y"],Var "y"]]],Block ["hl" := Constant 4,While (Var "hl") (Block [Print (Op Not [Op Geq [Var "x",Var "hl"]]),"hl" := Op Sub [Var "hl",Constant 1]])]],Print (Op Neg [Op Geq [Op Mul [Constant 3,Constant 7],Var "x"]]),Block [Print (Op Geq [Op Add [Op Greater [Op And [Constant 10,Var "x"],Op Or [Var "y",Var "x"]],Op Greater [Op Or [Constant 10,Constant 6],Var "x"]],Var "y"]),Block ["y" := Op Mul [Var "x",Op And [Var "x",Constant 2]]]]],Block ["cl" := Constant 6,While (Var "cl") (Block ["y" := Var "cl","cl" := Op Sub [Var "cl",Constant 1]])],Block [IfThenElse (Op Less [Constant 6,Constant 1]) (Print (Op Or [Op Mul [Op Not [Op Leq [Constant 7,Var "x"]],Var "x"],Var "x"])) (Block ["q" := Constant 10,While (Var "q") (Block ["y" := Op Geq [Op Add [Constant 3,Var "x"],Op Geq [Var "x",Var "q"]],"q" := Op Sub [Var "q",Constant 1]])]),Block [Block ["tl" := Constant 2,While (Var "tl") (Block ["y" := Op Geq [Op And [Op Greater [Op Neg [Var "y"],Op Mul [Var "y",Constant (-1)]],Op Leq [Var "x",Constant 0]],Op And [Constant (-6),Constant 5]],"tl" := Op Sub [Var "tl",Constant 1]])],Block ["y" := Op Geq [Op Or [Op Neg [Constant (-8)],Var "y"],Op Geq [Op Geq [Var "y",Constant 10],Var "x"]]]],"x" := Op Sub [Constant 7,Op Sub [Var "y",Constant 6]],IfThenElse (Op Add [Op Add [Constant 3,Constant 4],Constant 9]) ("x" := Op Neg [Op Greater [Op Eq [Constant 1,Op Or [Var "x",Var "x"]],Op Neg [Constant (-10)]]]) (Block ["x" := Op Or [Var "x",Op Or [Constant 9,Constant (-10)]]]),IfThenElse (Op Neg [Op Less [Op Geq [Op Greater [Constant (-7),Constant (-2)],Var "y"],Var "x"]]) (Print (Op And [Op Less [Op Add [Constant (-8),Op Mul [Var "y",Var "x"]],Op Or [Constant 4,Op Less [Constant 9,Var "y"]]],Op Eq [Op Greater [Constant 3,Var "y"],Var "y"]])) (Block ["x" := Op Leq [Var "y",Op Eq [Constant 1,Op Add [Constant 2,Constant (-3)]]]])],Block [Block [IfThenElse (Var "x") (Print (Op Geq [Op Neg [Constant (-3)],Op Add [Var "y",Op Eq [Op Add [Var "y",Constant (-9)],Constant 1]]])) (Print (Op Or [Constant (-9),Constant (-3)])),IfThenElse (Op Sub [Var "x",Op Not [Op Mul [Op Eq [Var "x",Constant 8],Op Mul [Constant 6,Constant 4]]]]) ("y" := Op Geq [Op Less [Op Neg [Constant 6],Constant (-5)],Op Greater [Op Less [Var "x",Op Neg [Constant 2]],Var "x"]]) (Print (Constant (-3)))],Block ["el" := Constant 0,While (Var "el") (Block ["x" := Op Or [Op Greater [Op Neg [Op Geq [Var "el",Var "y"]],Op Not [Var "x"]],Op Or [Op Add [Var "x",Constant 3],Op Mul [Op Eq [Constant 7,Var "y"],Op Add [Var "x",Var "el"]]]],"el" := Op Sub [Var "el",Constant 1]])],Block ["i" := Constant 6,While (Var "i") (Block ["x" := Op Add [Op Sub [Constant (-6),Constant 5],Op Not [Constant 9]],"i" := Op Sub [Var "i",Constant 1]])],Block ["j" := Constant 2,While (Var "j") (Block [Print (Op Neg [Constant (-4)]),"j" := Op Sub [Var "j",Constant 1]])],Print (Op Not [Var "y"])]]],[("j",7),("k",-5),("l",-9),("m",-1),("n",-1),("o",-6),("p",-10),("q",3),("r",-2),("s",-8),("t",4),("u",-7),("v",2),("w",4),("x",1),("y",-8),("z",-10),("a",-5),("b",10),("c",3),("d",-2),("e",-10),("f",-2),("g",10),("h",-7),("i",9)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Not [Op Less [Var "y",Var "y"]]) (IfThenElse (Op Neg [Var "y"]) (Print (Op And [Constant 3,Op Less [Constant (-9),Var "y"]])) (IfThenElse (Op Mul [Constant 5,Op Or [Constant (-10),Var "y"]]) (Print (Op Leq [Var "y",Op Less [Var "y",Var "x"]])) (Print (Var "x")))) (Block [IfThenElse (Op Or [Constant (-6),Constant 6]) ("y" := Op Leq [Var "y",Op Mul [Op Eq [Constant 6,Var "x"],Op Geq [Op Or [Constant (-2),Constant 3],Constant (-8)]]]) (IfThenElse (Op Geq [Op Greater [Var "x",Constant 9],Op Not [Constant (-5)]]) (Print (Op And [Op Geq [Constant (-6),Constant 7],Op Geq [Constant 7,Op Greater [Op Neg [Constant 1],Constant 2]]])) (Print (Op Not [Var "x"]))),Block ["x" := Constant (-10),Print (Var "y")],Block ["x" := Op Sub [Var "y",Constant 7],Print (Op Neg [Var "x"])],Block [Block ["x" := Op Add [Op Greater [Op Sub [Op Geq [Var "x",Var "x"],Constant 1],Var "y"],Constant 9]],"y" := Op Mul [Op Less [Var "y",Var "x"],Op Eq [Var "y",Op Add [Var "y",Constant 1]]]],Block ["ll" := Constant 6,While (Var "ll") (Block [Print (Constant (-7)),"ll" := Op Sub [Var "ll",Constant 1]])]])],[("a",-4),("b",-2),("c",-8),("d",1),("e",-8),("f",0),("g",-8),("h",1),("i",4),("j",-6),("k",-7),("l",4),("m",-6),("n",-4),("o",5),("p",-5),("q",-7),("r",3),("s",5),("t",6),("u",2),("v",9),("w",-4),("x",0),("y",10),("z",1)]),(Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Neg [Op Eq [Constant 6,Constant (-1)]]) (IfThenElse (Constant (-8)) (Block ["gl" := Constant 10,While (Var "gl") (Block ["y" := Op Eq [Op Geq [Constant 5,Op And [Var "gl",Var "x"]],Op Neg [Constant 7]],"gl" := Op Sub [Var "gl",Constant 1]])]) (Block ["y" := Op Add [Constant 2,Op Mul [Constant (-6),Constant 8]],Block [Print (Op Mul [Op Mul [Op Neg [Op Leq [Constant 5,Constant 5]],Constant (-4)],Op Eq [Constant 2,Var "x"]])]])) (IfThenElse (Var "x") ("y" := Op Mul [Op Geq [Op And [Op And [Var "y",Constant 4],Op Add [Var "x",Constant (-1)]],Var "x"],Op Neg [Var "y"]]) (Block [IfThenElse (Var "x") ("x" := Op Greater [Op Neg [Var "x"],Var "y"]) (Print (Op Or [Op Sub [Constant 2,Op Not [Op Leq [Var "x",Var "y"]]],Constant (-1)])),Block [Print (Op Sub [Op Sub [Var "y",Op Or [Var "x",Op Mul [Constant (-5),Constant (-8)]]],Op Geq [Constant 7,Constant 6]])]]))],[("z",8),("a",-1),("b",4),("c",10),("d",8),("e",10),("f",-1),("g",9),("h",10),("i",5),("j",8),("k",-8),("l",-9),("m",2),("n",-5),("o",-8),("p",-2),("q",5),("r",6),("s",0),("t",-10),("u",-8),("v",4),("w",-4),("x",1),("y",9)]),(Block ["x" := Constant 1,"y" := Constant 1,Block [IfThenElse (Op Not [Op Geq [Op Not [Var "x"],Op Sub [Op Not [Var "y"],Var "x"]]]) (Block ["ql" := Constant 5,While (Var "ql") (Block ["x" := Op Sub [Constant 6,Op Geq [Constant (-8),Var "ql"]],"ql" := Op Sub [Var "ql",Constant 1]])]) (Block [Block ["y" := Var "x"],Block ["o" := Constant 10,While (Var "o") (Block ["x" := Var "o","o" := Op Sub [Var "o",Constant 1]])]]),IfThenElse (Op Eq [Var "y",Op And [Var "y",Op Not [Var "x"]]]) (Block [IfThenElse (Op Add [Op Eq [Op Eq [Op Add [Constant 10,Var "y"],Op Neg [Var "x"]],Var "y"],Op Sub [Op Less [Var "x",Op Mul [Var "x",Var "y"]],Constant 8]]) (Print (Op Leq [Op Neg [Var "y"],Op Neg [Constant 8]])) (Print (Op Add [Op Less [Var "y",Var "x"],Op Mul [Op Greater [Constant (-3),Constant (-6)],Op Neg [Constant (-8)]]])),"x" := Op Mul [Op Greater [Op And [Op Geq [Constant (-2),Var "y"],Op Not [Constant 10]],Var "x"],Op Eq [Constant (-8),Var "x"]]]) (Block ["pl" := Constant 4,While (Var "pl") (Block ["y" := Op Sub [Op Less [Op Add [Op Neg [Var "x"],Constant 3],Op Add [Var "y",Constant (-5)]],Op Add [Op Neg [Op Not [Constant 9]],Op And [Op Sub [Constant 0,Var "y"],Constant 8]]],"pl" := Op Sub [Var "pl",Constant 1]])]),Block [Print (Var "y"),"x" := Op Or [Var "x",Constant (-5)],Print (Op Add [Op And [Op Or [Var "x",Op Leq [Var "y",Var "y"]],Op Eq [Op Greater [Constant (-3),Constant 5],Var "x"]],Op Not [Var "y"]]),Block ["p" := Constant 5,While (Var "p") (Block ["x" := Op Greater [Constant (-6),Op Or [Var "p",Constant (-4)]],"p" := Op Sub [Var "p",Constant 1]])],Block ["ol" := Constant 1,While (Var "ol") (Block [Print (Op Mul [Op Less [Var "y",Constant 3],Op Eq [Constant 10,Op And [Constant (-8),Op Or [Constant (-1),Constant (-7)]]]]),"ol" := Op Sub [Var "ol",Constant 1]])]],Block [IfThenElse (Op Not [Op Sub [Op Greater [Op Add [Var "y",Constant (-1)],Op Less [Constant (-4),Var "x"]],Var "y"]]) (Print (Op Add [Constant (-8),Op Greater [Op Sub [Var "x",Constant (-8)],Constant 5]])) (Block ["y" := Op Sub [Op Neg [Op And [Var "y",Op Mul [Constant 3,Constant 10]]],Op Eq [Op Or [Op Add [Var "y",Var "x"],Op Leq [Var "x",Var "y"]],Constant (-2)]]]),Block ["yl" := Constant 10,While (Var "yl") (Block [Print (Var "y"),"yl" := Op Sub [Var "yl",Constant 1]])],Block ["a" := Constant 2,While (Var "a") (Block ["y" := Var "a","a" := Op Sub [Var "a",Constant 1]])],IfThenElse (Op Not [Constant (-9)]) (IfThenElse (Op Geq [Constant (-4),Constant (-1)]) (Print (Op Add [Op Less [Op Add [Constant (-2),Var "x"],Var "x"],Op Add [Constant (-2),Op Geq [Var "y",Var "x"]]])) (Print (Op Mul [Var "x",Op Mul [Var "x",Op Greater [Op Sub [Constant 4,Constant (-7)],Constant 9]]]))) (IfThenElse (Op Geq [Op Sub [Op And [Constant (-1),Op Not [Var "y"]],Op Less [Op Mul [Constant (-1),Constant (-5)],Op And [Var "y",Var "y"]]],Op Geq [Op Geq [Constant 3,Constant 3],Op Leq [Var "y",Constant (-4)]]]) ("x" := Op Leq [Constant (-10),Op Sub [Constant (-7),Op Eq [Var "y",Var "x"]]]) (Print (Op Not [Constant 8]))),"x" := Op Not [Constant (-9)]],IfThenElse (Op Less [Constant 10,Op Geq [Var "x",Op Mul [Constant 9,Var "x"]]]) (IfThenElse (Op Add [Constant 1,Op Mul [Op Less [Var "x",Op Neg [Var "x"]],Op Add [Op Less [Constant 3,Var "y"],Op Not [Var "y"]]]]) (Block [Print (Op Less [Var "x",Op Neg [Op Less [Op Add [Constant (-5),Constant 0],Var "x"]]])]) (Block ["k" := Constant 3,While (Var "k") (Block [Print (Op Or [Op Eq [Op Eq [Var "x",Constant 7],Op And [Constant (-5),Constant (-7)]],Constant 6]),"k" := Op Sub [Var "k",Constant 1]])])) ("y" := Var "y")]],[("r",-8),("s",-9),("t",-10),("u",10),("v",0),("w",10),("x",0),("y",2),("z",7),("a",-8),("b",-9),("c",10),("d",1),("e",-8),("f",-10),("g",-5),("h",9),("i",8),("j",-8),("k",-2),("l",-6),("m",-3),("n",2),("o",6),("p",-6),("q",4)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["t" := Constant 8,While (Var "t") (Block ["y" := Op Greater [Op And [Op Mul [Var "y",Op Neg [Var "t"]],Op Greater [Op And [Var "x",Constant 0],Var "t"]],Constant (-3)],"t" := Op Sub [Var "t",Constant 1]])]],[("b",-1),("c",-5),("d",-3),("e",9),("f",6),("g",1),("h",-10),("i",-1),("j",5),("k",9),("l",0),("m",-10),("n",-5),("o",-10),("p",-8),("q",3),("r",-3),("s",5),("t",6),("u",-3),("v",-2),("w",8),("x",-10),("y",-3),("z",6),("a",-9)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["vl" := Constant 2,While (Var "vl") (Block ["x" := Op Sub [Constant 0,Op Greater [Constant 6,Op Sub [Var "vl",Var "vl"]]],"vl" := Op Sub [Var "vl",Constant 1]])]],[("n",7),("o",-9),("p",-10),("q",4),("r",10),("s",-2),("t",2),("u",8),("v",3),("w",-3),("x",-2),("y",-8),("z",0),("a",-6),("b",10),("c",2),("d",-8),("e",0),("f",7),("g",5),("h",10),("i",-6),("j",-7),("k",5),("l",10),("m",6)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["p" := Constant 10,While (Var "p") (Block [Print (Op Eq [Constant 3,Op Not [Op Not [Constant 3]]]),"p" := Op Sub [Var "p",Constant 1]])]],[("e",-10),("f",6),("g",10),("h",-5),("i",4),("j",9),("k",-5),("l",-2),("m",-7),("n",4),("o",7),("p",-6),("q",-7),("r",7),("s",-8),("t",1),("u",7),("v",-6),("w",-5),("x",4),("y",-4),("z",2),("a",6),("b",9),("c",-8),("d",7)]),(Block ["x" := Constant 1,"y" := Constant 1,Block ["v" := Constant 9,While (Var "v") (Block ["y" := Op Add [Op Less [Op Add [Op Add [Var "v",Var "x"],Op Add [Constant (-7),Constant (-8)]],Op Leq [Constant (-6),Constant 4]],Op Sub [Op Geq [Op Eq [Constant 3,Constant 3],Op Geq [Var "v",Var "x"]],Constant (-10)]],"v" := Op Sub [Var "v",Constant 1]])]],[("m",-9),("n",-5),("o",1),("p",2),("q",-6),("r",-6),("s",10),("t",2),("u",-9),("v",2),("w",9),("x",-10),("y",1),("z",-7),("a",2),("b",-10),("c",-9),("d",0),("e",10),("f",4),("g",6),("h",-8),("i",9),("j",-4),("k",6),("l",-3)])]
func_runHelper'_out = [[0],[],[0],[],[],[1,1],[],[2,1,0],[],[0],[],[],[9,9,9],[1,1,1,1,1,1,-1,1,1,4,4,0],[1],[],[-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0],[],[],[0,0,0,0,0,0,0,0,0,0],[]]

-- Inputs and correct outputs for func_constantFolding_folds_enough
func_constantFolding_folds_enough_in = [Block ["x" := Constant 1,"y" := Constant 1,"y" := Constant 0],Block ["x" := Constant 1,"y" := Constant 1,Block ["vl" := Constant 1,While (Var "vl") (Block ["x" := Var "vl","vl" := Op Sub [Var "vl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op And [Var "y",Constant 1]) (Block [Print (Var "x")]) (Block [Print (Constant 0)])],Block ["x" := Constant 1,"y" := Constant 1,Print (Var "y")],Block ["x" := Constant 1,"y" := Constant 1,Block [IfThenElse (Constant (-4)) (IfThenElse (Op Or [Op Or [Op Geq [Var "y",Constant (-2)],Constant 1],Var "x"]) (Print (Var "x")) (Print (Op Mul [Op Geq [Op Leq [Var "y",Var "x"],Op Leq [Var "x",Var "y"]],Op Greater [Var "x",Var "x"]]))) (Block ["y" := Op Add [Op Leq [Var "y",Op Add [Constant (-3),Constant (-4)]],Op And [Op Less [Constant 0,Var "x"],Constant (-4)]]]),IfThenElse (Constant (-3)) (Block [Print (Op Eq [Op Leq [Op Sub [Var "x",Constant (-1)],Constant (-2)],Constant 2])]) (Print (Var "x")),Print (Op And [Constant 2,Op Leq [Op Neg [Constant 1],Op Greater [Var "y",Var "y"]]]),Block ["rl" := Constant 2,While (Var "rl") (Block ["x" := Op Or [Op Not [Op And [Constant (-3),Var "y"]],Var "rl"],"rl" := Op Sub [Var "rl",Constant 1]])]]],Block ["x" := Constant 1,"y" := Constant 1,Block ["y" := Op Neg [Var "x"],Block ["nl" := Constant 5,While (Var "nl") (Block [Print (Op Less [Op Mul [Var "y",Var "x"],Op Leq [Var "x",Var "nl"]]),"nl" := Op Sub [Var "nl",Constant 1]])],Block ["yl" := Constant 2,While (Var "yl") (Block [Print (Op Mul [Op Sub [Op Mul [Constant 4,Var "y"],Var "y"],Var "y"]),"yl" := Op Sub [Var "yl",Constant 1]])],Print (Op Geq [Op Less [Var "y",Constant 5],Constant (-1)]),Block ["x" := Op Neg [Var "x"],Print (Constant (-3))]]],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Or [Constant 2,Op Geq [Constant 5,Op Sub [Var "x",Var "y"]]]) (Block ["ol" := Constant 3,While (Var "ol") (Block [Print (Op Or [Op Sub [Constant (-1),Var "ol"],Op Neg [Op Leq [Var "x",Var "y"]]]),"ol" := Op Sub [Var "ol",Constant 1]])]) (IfThenElse (Op Or [Constant (-3),Op Leq [Constant (-6),Constant 1]]) (IfThenElse (Op Or [Op Or [Op Add [Constant (-3),Var "x"],Var "y"],Var "x"]) ("y" := Op Geq [Op Sub [Constant (-4),Constant (-5)],Op Less [Var "x",Var "x"]]) (Print (Op Or [Op Neg [Op Geq [Var "x",Constant (-5)]],Constant 4]))) (Block ["ul" := Constant 1,While (Var "ul") (Block [Print (Op Mul [Constant 3,Var "x"]),"ul" := Op Sub [Var "ul",Constant 1]])]))],Block ["x" := Constant 1,"y" := Constant 1,Block ["fl" := Constant 2,While (Var "fl") (Block ["y" := Op Greater [Constant (-1),Constant (-5)],"fl" := Op Sub [Var "fl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,Block ["fl" := Constant 6,While (Var "fl") (Block ["y" := Constant (-5),"fl" := Op Sub [Var "fl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op And [Op And [Op Add [Op Neg [Var "y"],Op Not [Var "y"]],Op Not [Op Not [Var "x"]]],Op Eq [Op And [Op Not [Constant (-7)],Constant 0],Op Mul [Var "x",Var "y"]]]) (IfThenElse (Op Or [Op Sub [Op Eq [Var "y",Op Neg [Constant 8]],Op Less [Op Mul [Constant (-1),Constant (-9)],Var "x"]],Op Geq [Constant 6,Constant 8]]) ("x" := Op Mul [Op Geq [Op Greater [Constant 7,Constant (-7)],Constant 6],Constant (-3)]) ("x" := Constant (-3))) (Block ["gl" := Constant 4,While (Var "gl") (Block [Print (Op Geq [Var "y",Op Geq [Op Eq [Constant 2,Op Eq [Var "x",Var "x"]],Constant 1]]),"gl" := Op Sub [Var "gl",Constant 1]])])],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Or [Op Not [Var "x"],Op Sub [Op Neg [Constant (-10)],Var "x"]]) (Block ["yl" := Constant 5,While (Var "yl") (Block ["x" := Op Not [Op And [Var "x",Var "x"]],"yl" := Op Sub [Var "yl",Constant 1]])]) ("y" := Constant (-2))],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Neg [Op Sub [Constant (-3),Op Mul [Var "x",Op Eq [Constant 10,Constant 3]]]]) (Block ["yl" := Constant 8,While (Var "yl") (Block [Print (Op Add [Var "y",Op Sub [Op Geq [Constant (-7),Constant 1],Var "x"]]),"yl" := Op Sub [Var "yl",Constant 1]])]) (Block ["vl" := Constant 3,While (Var "vl") (Block ["y" := Op Neg [Constant (-2)],"vl" := Op Sub [Var "vl",Constant 1]])])],Block ["x" := Constant 1,"y" := Constant 1,Block [IfThenElse (Op Neg [Constant 8]) (Print (Op Eq [Var "x",Op Less [Var "x",Var "x"]])) (Block [Print (Op Leq [Op Sub [Var "x",Constant 5],Op Neg [Op Or [Var "y",Op Sub [Var "y",Constant 4]]]]),IfThenElse (Op Less [Op And [Op Mul [Var "x",Constant 2],Op Neg [Constant (-4)]],Op Geq [Op Geq [Var "y",Var "y"],Constant 7]]) (Print (Op Geq [Op Geq [Constant 4,Op Geq [Var "x",Op Or [Var "x",Constant 4]]],Op Eq [Constant 2,Op And [Op Geq [Constant (-7),Constant 0],Var "x"]]])) ("y" := Constant 6)]),IfThenElse (Op Or [Op Less [Var "x",Op Or [Var "x",Constant 2]],Op Not [Var "y"]]) ("x" := Op Mul [Op Greater [Op Not [Op Mul [Var "x",Var "y"]],Constant (-1)],Op Or [Op Less [Op Mul [Constant (-7),Var "y"],Constant 5],Op Leq [Constant (-5),Constant (-5)]]]) (Block [Print (Op Greater [Op Sub [Op Less [Op Greater [Var "x",Var "x"],Constant 8],Var "x"],Op Eq [Op Neg [Constant (-6)],Op Greater [Constant 5,Op Eq [Var "x",Constant 1]]]]),IfThenElse (Op Neg [Op Sub [Op Not [Var "y"],Constant (-9)]]) (Print (Op Geq [Op Neg [Constant (-6)],Op Leq [Op Or [Op Add [Var "y",Var "x"],Var "x"],Op Not [Op Greater [Constant (-4),Var "y"]]]])) (Print (Op Mul [Op Eq [Var "y",Constant 4],Op Greater [Var "y",Op Geq [Op Eq [Var "y",Var "y"],Op Not [Constant 4]]]]))]),IfThenElse (Op Sub [Op Mul [Constant (-5),Op Or [Var "x",Var "x"]],Var "y"]) (Print (Constant (-4))) (Block ["ol" := Constant 3,While (Var "ol") (Block ["x" := Op Neg [Op Neg [Op And [Op Eq [Var "ol",Constant (-4)],Constant (-5)]]],"ol" := Op Sub [Var "ol",Constant 1]])]),IfThenElse (Op Sub [Op Less [Var "y",Op Eq [Var "x",Var "y"]],Op Not [Op Geq [Var "x",Constant (-9)]]]) ("x" := Var "y") (Print (Op Not [Var "x"])),IfThenElse (Op Less [Constant 8,Op Geq [Var "x",Var "y"]]) (Block [IfThenElse (Op Less [Op Sub [Op And [Op Not [Var "x"],Op Or [Var "y",Var "y"]],Op Or [Var "y",Constant 7]],Op Or [Op And [Var "x",Constant (-9)],Constant (-3)]]) ("x" := Op Mul [Op Add [Constant (-9),Op Eq [Constant 3,Constant 1]],Op Not [Constant 10]]) ("y" := Op Or [Op Leq [Op Or [Constant (-1),Var "y"],Var "y"],Op Geq [Constant 9,Constant (-4)]]),Block ["ul" := Constant 7,While (Var "ul") (Block [Print (Op Sub [Op And [Op Leq [Var "x",Var "y"],Constant (-1)],Constant 1]),"ul" := Op Sub [Var "ul",Constant 1]])]]) (Block ["x" := Op Greater [Var "y",Op Geq [Var "y",Constant 10]],Block ["x" := Op Greater [Var "y",Constant (-7)]]])]],Block ["x" := Constant 1,"y" := Constant 1,Block [IfThenElse (Op Eq [Op Mul [Op Leq [Constant (-9),Op Leq [Constant 0,Var "x"]],Constant (-9)],Op Or [Var "x",Var "y"]]) (Block [Block ["x" := Constant (-8)],Block ["wl" := Constant 7,While (Var "wl") (Block [Print (Op Less [Op Leq [Var "x",Var "wl"],Op Less [Var "y",Var "y"]]),"wl" := Op Sub [Var "wl",Constant 1]])]]) (Print (Op Add [Op Greater [Var "x",Op Leq [Var "y",Constant 5]],Constant (-6)])),Print (Op Greater [Var "x",Op Neg [Var "x"]]),Block ["ll" := Constant 3,While (Var "ll") (Block [Print (Op Sub [Var "x",Var "y"]),"ll" := Op Sub [Var "ll",Constant 1]])],IfThenElse (Constant (-5)) (Block ["x" := Op And [Op Mul [Op Eq [Constant (-1),Op Greater [Var "x",Constant (-7)]],Op Less [Var "x",Op Or [Constant (-2),Var "y"]]],Op Add [Op Neg [Constant (-10)],Op Mul [Var "x",Constant 4]]],Block ["wl" := Constant 2,While (Var "wl") (Block ["x" := Op Or [Op Eq [Op Not [Constant (-9)],Op Add [Op Neg [Constant 1],Var "y"]],Op Or [Op Neg [Constant 0],Op Neg [Constant (-5)]]],"wl" := Op Sub [Var "wl",Constant 1]])]]) (Block [Block [Print (Op Mul [Op Leq [Op Less [Constant (-4),Op And [Constant (-2),Constant 6]],Op Mul [Op Greater [Var "y",Var "x"],Constant (-7)]],Op Not [Op Add [Constant (-2),Op Greater [Constant (-9),Var "y"]]]])],IfThenElse (Op Greater [Op Add [Op Eq [Constant 7,Op Eq [Constant 0,Var "x"]],Op Eq [Constant 9,Var "x"]],Op Less [Op Less [Op Less [Var "x",Var "x"],Constant 1],Op Not [Constant 8]]]) (Print (Constant (-6))) ("y" := Constant 7)]),Block [Block ["kl" := Constant 6,While (Var "kl") (Block [Print (Constant (-9)),"kl" := Op Sub [Var "kl",Constant 1]])],IfThenElse (Op Greater [Constant 2,Op Neg [Op Mul [Var "x",Op And [Var "x",Constant 6]]]]) (IfThenElse (Op Geq [Op Greater [Op Geq [Var "x",Var "y"],Constant 6],Op Add [Op Sub [Constant (-10),Op Not [Constant (-9)]],Var "x"]]) (Print (Op And [Op Not [Op Greater [Op Less [Var "y",Var "x"],Var "y"]],Op And [Op Not [Op Less [Constant 6,Constant 5]],Var "y"]])) (Print (Op Neg [Op Add [Op Sub [Op Or [Constant 9,Var "y"],Constant (-8)],Op Geq [Var "y",Var "x"]]]))) (Block ["xl" := Constant 4,While (Var "xl") (Block [Print (Op Neg [Op Or [Op Add [Var "xl",Op Eq [Var "x",Constant (-2)]],Constant 10]]),"xl" := Op Sub [Var "xl",Constant 1]])]),Block ["nl" := Constant 8,While (Var "nl") (Block [Print (Op Add [Op Greater [Op Eq [Var "x",Op Leq [Constant (-4),Constant (-2)]],Op Not [Constant 1]],Op Less [Op Greater [Constant 8,Constant 4],Var "y"]]),"nl" := Op Sub [Var "nl",Constant 1]])],"x" := Op Geq [Op Less [Op Neg [Constant (-9)],Constant (-2)],Op And [Var "y",Op Neg [Constant (-2)]]],Block ["kl" := Constant 6,While (Var "kl") (Block ["y" := Op Neg [Op Neg [Op Sub [Op Greater [Constant (-5),Constant 9],Op Neg [Var "x"]]]],"kl" := Op Sub [Var "kl",Constant 1]])]]]],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Var "y") (Block [Print (Op Neg [Op Not [Op Mul [Var "x",Op Add [Var "y",Var "y"]]]]),Block [Block ["il" := Constant 4,While (Var "il") (Block ["x" := Op And [Op Mul [Op Leq [Op Or [Var "x",Constant (-9)],Var "x"],Op Or [Op Greater [Var "y",Constant (-1)],Op Not [Constant 3]]],Op And [Var "x",Constant (-10)]],"il" := Op Sub [Var "il",Constant 1]])],"y" := Constant 7],Block ["zl" := Constant 8,While (Var "zl") (Block ["x" := Op Leq [Op Add [Var "x",Op Less [Var "y",Var "y"]],Op Neg [Op Geq [Var "y",Var "y"]]],"zl" := Op Sub [Var "zl",Constant 1]])],Block ["vl" := Constant 2,While (Var "vl") (Block [Print (Op Geq [Op Less [Op Greater [Constant 3,Var "x"],Constant 0],Op Less [Var "x",Constant 1]]),"vl" := Op Sub [Var "vl",Constant 1]])],Block ["wl" := Constant 7,While (Var "wl") (Block ["x" := Op And [Constant 4,Op Leq [Op Add [Constant 9,Constant 1],Op And [Constant (-10),Op Or [Var "wl",Constant (-5)]]]],"wl" := Op Sub [Var "wl",Constant 1]])]]) (IfThenElse (Op Greater [Op Geq [Op Leq [Op Mul [Var "y",Var "x"],Op Greater [Var "x",Constant 8]],Op Sub [Var "y",Var "y"]],Op Neg [Op And [Constant 7,Constant 8]]]) (Block [IfThenElse (Op Greater [Op Geq [Op Less [Var "x",Op Geq [Constant 6,Var "x"]],Op Or [Constant 7,Var "x"]],Constant (-7)]) (Print (Op Add [Var "x",Constant (-10)])) (Print (Op Eq [Op Leq [Op And [Op Geq [Var "y",Var "x"],Constant 1],Op Eq [Constant (-3),Var "y"]],Op Eq [Op Or [Constant 0,Var "y"],Op Geq [Var "y",Op Not [Constant (-7)]]]])),Block ["x" := Op Not [Op Not [Op And [Op Sub [Var "y",Constant 8],Constant (-1)]]]]]) (Block ["yl" := Constant 1,While (Var "yl") (Block ["y" := Op Sub [Op Mul [Var "x",Op Neg [Op Or [Constant (-5),Var "yl"]]],Op Not [Op Add [Op Or [Constant (-10),Var "yl"],Constant (-4)]]],"yl" := Op Sub [Var "yl",Constant 1]])]))],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Or [Op Not [Constant 9],Var "x"]) (IfThenElse (Var "y") (Print (Op Eq [Op Not [Op And [Constant 9,Constant (-8)]],Op Not [Var "y"]])) (Block [Print (Op Mul [Op Not [Op Less [Var "x",Var "x"]],Op And [Var "x",Var "y"]]),"y" := Op Less [Constant 0,Constant 7]])) (Block [Block [Block ["x" := Op Eq [Op Less [Var "y",Constant (-3)],Op Eq [Constant 8,Var "x"]]],Block [Print (Op Or [Op Add [Op Eq [Constant (-7),Constant 8],Op Add [Constant (-8),Op Neg [Var "y"]]],Op Not [Constant 0]])]],Block [Print (Op Add [Op Sub [Constant 7,Var "x"],Var "x"]),Print (Var "y")],IfThenElse (Constant 0) (IfThenElse (Op Not [Op Less [Op Sub [Op And [Constant 3,Var "y"],Constant 1],Var "y"]]) ("y" := Op Mul [Op Add [Var "x",Var "x"],Op Not [Var "x"]]) (Print (Op Eq [Op And [Constant (-7),Var "y"],Op Or [Op Neg [Var "y"],Op Sub [Constant (-1),Op Mul [Constant 9,Constant (-8)]]]]))) (Block ["il" := Constant 7,While (Var "il") (Block ["y" := Op Neg [Op Eq [Constant (-7),Var "x"]],"il" := Op Sub [Var "il",Constant 1]])]),Print (Op Eq [Op Greater [Constant (-8),Op Add [Var "y",Op Mul [Constant 1,Constant 6]]],Var "x"]),"x" := Var "x"])],Block ["x" := Constant 1,"y" := Constant 1,Block ["tl" := Constant 2,While (Var "tl") (Block [Print (Var "x"),"tl" := Op Sub [Var "tl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,Block ["hl" := Constant 4,While (Var "hl") (Block ["y" := Op Mul [Op Geq [Var "x",Op Neg [Op And [Constant 1,Var "hl"]]],Op Less [Var "hl",Op Leq [Constant 3,Var "hl"]]],"hl" := Op Sub [Var "hl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,"y" := Op Sub [Op Leq [Var "x",Op Sub [Constant (-4),Op Neg [Var "y"]]],Op Eq [Var "x",Op Neg [Op Neg [Constant (-9)]]]]],Block ["x" := Constant 1,"y" := Constant 1,Block [IfThenElse (Op Greater [Var "x",Constant 5]) (Block [Block ["dl" := Constant 6,While (Var "dl") (Block [Print (Constant (-9)),"dl" := Op Sub [Var "dl",Constant 1]])],Block [Print (Op Less [Op Not [Var "y"],Op Sub [Op Add [Op Add [Var "y",Var "x"],Var "x"],Op Or [Op Not [Constant 5],Var "y"]]])]]) ("y" := Op Not [Var "x"]),Block [Print (Op Add [Var "y",Op Mul [Op Mul [Var "x",Constant (-6)],Op Greater [Op Geq [Constant (-2),Var "x"],Var "x"]]]),Print (Op Geq [Op And [Constant (-7),Op And [Constant (-7),Constant 9]],Op Leq [Op Or [Var "x",Var "x"],Constant (-7)]]),IfThenElse (Var "y") (Print (Op Sub [Constant 4,Op Mul [Constant (-4),Constant (-10)]])) (Print (Op Neg [Op Add [Op Leq [Var "y",Var "x"],Op Neg [Constant (-6)]]])),Print (Op Neg [Op Eq [Constant 8,Op Leq [Constant (-8),Op Mul [Constant (-10),Constant 4]]]]),Block ["tl" := Constant 10,While (Var "tl") (Block ["x" := Op Geq [Var "x",Op Not [Constant 9]],"tl" := Op Sub [Var "tl",Constant 1]])]],Block ["ul" := Constant 2,While (Var "ul") (Block [Print (Op Add [Op Less [Op Mul [Constant (-3),Var "y"],Op Mul [Op Greater [Var "y",Constant (-6)],Op Not [Constant (-3)]]],Op Add [Op Neg [Constant (-1)],Var "ul"]]),"ul" := Op Sub [Var "ul",Constant 1]])],Block ["wl" := Constant 6,While (Var "wl") (Block [Print (Op Or [Op Geq [Op Neg [Constant 6],Constant (-7)],Op Leq [Var "y",Var "x"]]),"wl" := Op Sub [Var "wl",Constant 1]])],IfThenElse (Op Add [Op Mul [Op Neg [Op Less [Constant 9,Constant (-8)]],Var "x"],Op Mul [Var "x",Constant (-3)]]) (Block ["vl" := Constant 6,While (Var "vl") (Block [Print (Op Or [Op Mul [Var "y",Constant (-8)],Op Eq [Constant (-10),Op Neg [Op And [Var "vl",Var "vl"]]]]),"vl" := Op Sub [Var "vl",Constant 1]])]) (Block ["al" := Constant 10,While (Var "al") (Block [Print (Op Sub [Constant (-6),Op Not [Op Leq [Op And [Constant 5,Var "al"],Var "y"]]]),"al" := Op Sub [Var "al",Constant 1]])])]],Block ["x" := Constant 1,"y" := Constant 1,Block [Block ["sl" := Constant 4,While (Var "sl") (Block ["x" := Op Sub [Op Or [Op Sub [Constant (-6),Constant 6],Constant (-2)],Op Less [Op Neg [Op Geq [Constant 5,Var "y"]],Op Leq [Var "x",Op Less [Var "x",Var "y"]]]],"sl" := Op Sub [Var "sl",Constant 1]])],Block ["rl" := Constant 8,While (Var "rl") (Block ["y" := Op Not [Var "rl"],"rl" := Op Sub [Var "rl",Constant 1]])],IfThenElse (Op Sub [Op Less [Op Or [Var "y",Var "y"],Op Less [Var "x",Var "x"]],Constant (-7)]) ("x" := Op Or [Op Add [Op And [Var "y",Var "y"],Op Sub [Var "x",Op Eq [Constant 7,Constant 7]]],Constant (-5)]) (Block ["ml" := Constant 1,While (Var "ml") (Block [Print (Op Mul [Op Geq [Constant (-5),Op Less [Op Sub [Constant 3,Var "x"],Var "ml"]],Op Neg [Op Or [Var "y",Var "x"]]]),"ml" := Op Sub [Var "ml",Constant 1]])]),Block ["ll" := Constant 2,While (Var "ll") (Block [Print (Op Eq [Constant (-1),Constant 6]),"ll" := Op Sub [Var "ll",Constant 1]])],Block ["pl" := Constant 1,While (Var "pl") (Block ["x" := Op Leq [Var "x",Op Or [Constant 2,Var "y"]],"pl" := Op Sub [Var "pl",Constant 1]])]]]]
func_constantFolding_folds_enough_out = [Block ["x" := Constant 1,"y" := Constant 1,"y" := Constant 0],Block ["x" := Constant 1,"y" := Constant 1,Block ["vl" := Constant 1,While (Var "vl") (Block ["x" := Var "vl","vl" := Op Sub [Var "vl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op And [Var "y",Constant 1]) (Block [Print (Var "x")]) (Block [Print (Constant 0)])],Block ["x" := Constant 1,"y" := Constant 1,Print (Var "y")],Block ["x" := Constant 1,"y" := Constant 1,Block [IfThenElse (Op Or [Op Or [Op Geq [Var "y",Constant (-2)],Constant 1],Var "x"]) (Print (Var "x")) (Print (Op Mul [Op Geq [Op Leq [Var "y",Var "x"],Op Leq [Var "x",Var "y"]],Op Greater [Var "x",Var "x"]])),Block [Print (Op Eq [Op Leq [Op Sub [Var "x",Constant (-1)],Constant (-2)],Constant 2])],Print (Op And [Constant 2,Op Leq [Constant (-1),Op Greater [Var "y",Var "y"]]]),Block ["rl" := Constant 2,While (Var "rl") (Block ["x" := Op Or [Op Not [Op And [Constant (-3),Var "y"]],Var "rl"],"rl" := Op Sub [Var "rl",Constant 1]])]]],Block ["x" := Constant 1,"y" := Constant 1,Block ["y" := Op Neg [Var "x"],Block ["nl" := Constant 5,While (Var "nl") (Block [Print (Op Less [Op Mul [Var "y",Var "x"],Op Leq [Var "x",Var "nl"]]),"nl" := Op Sub [Var "nl",Constant 1]])],Block ["yl" := Constant 2,While (Var "yl") (Block [Print (Op Mul [Op Sub [Op Mul [Constant 4,Var "y"],Var "y"],Var "y"]),"yl" := Op Sub [Var "yl",Constant 1]])],Print (Op Geq [Op Less [Var "y",Constant 5],Constant (-1)]),Block ["x" := Op Neg [Var "x"],Print (Constant (-3))]]],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Or [Constant 2,Op Geq [Constant 5,Op Sub [Var "x",Var "y"]]]) (Block ["ol" := Constant 3,While (Var "ol") (Block [Print (Op Or [Op Sub [Constant (-1),Var "ol"],Op Neg [Op Leq [Var "x",Var "y"]]]),"ol" := Op Sub [Var "ol",Constant 1]])]) (IfThenElse (Op Or [Op Or [Op Add [Constant (-3),Var "x"],Var "y"],Var "x"]) ("y" := Op Geq [Constant 1,Op Less [Var "x",Var "x"]]) (Print (Op Or [Op Neg [Op Geq [Var "x",Constant (-5)]],Constant 4])))],Block ["x" := Constant 1,"y" := Constant 1,Block ["fl" := Constant 2,While (Var "fl") (Block ["y" := Constant 1,"fl" := Op Sub [Var "fl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,Block ["fl" := Constant 6,While (Var "fl") (Block ["y" := Constant (-5),"fl" := Op Sub [Var "fl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op And [Op And [Op Add [Op Neg [Var "y"],Op Not [Var "y"]],Op Not [Op Not [Var "x"]]],Op Eq [Constant 0,Op Mul [Var "x",Var "y"]]]) (IfThenElse (Op Or [Op Sub [Op Eq [Var "y",Constant (-8)],Op Less [Constant 9,Var "x"]],Constant 0]) ("x" := Constant 0) ("x" := Constant (-3))) (Block ["gl" := Constant 4,While (Var "gl") (Block [Print (Op Geq [Var "y",Op Geq [Op Eq [Constant 2,Op Eq [Var "x",Var "x"]],Constant 1]]),"gl" := Op Sub [Var "gl",Constant 1]])])],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Or [Op Not [Var "x"],Op Sub [Constant 10,Var "x"]]) (Block ["yl" := Constant 5,While (Var "yl") (Block ["x" := Op Not [Op And [Var "x",Var "x"]],"yl" := Op Sub [Var "yl",Constant 1]])]) ("y" := Constant (-2))],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Neg [Op Sub [Constant (-3),Op Mul [Var "x",Constant 0]]]) (Block ["yl" := Constant 8,While (Var "yl") (Block [Print (Op Add [Var "y",Op Sub [Constant 0,Var "x"]]),"yl" := Op Sub [Var "yl",Constant 1]])]) (Block ["vl" := Constant 3,While (Var "vl") (Block ["y" := Constant 2,"vl" := Op Sub [Var "vl",Constant 1]])])],Block ["x" := Constant 1,"y" := Constant 1,Block [Print (Op Eq [Var "x",Op Less [Var "x",Var "x"]]),IfThenElse (Op Or [Op Less [Var "x",Op Or [Var "x",Constant 2]],Op Not [Var "y"]]) ("x" := Op Mul [Op Greater [Op Not [Op Mul [Var "x",Var "y"]],Constant (-1)],Op Or [Op Less [Op Mul [Constant (-7),Var "y"],Constant 5],Constant 1]]) (Block [Print (Op Greater [Op Sub [Op Less [Op Greater [Var "x",Var "x"],Constant 8],Var "x"],Op Eq [Constant 6,Op Greater [Constant 5,Op Eq [Var "x",Constant 1]]]]),IfThenElse (Op Neg [Op Sub [Op Not [Var "y"],Constant (-9)]]) (Print (Op Geq [Constant 6,Op Leq [Op Or [Op Add [Var "y",Var "x"],Var "x"],Op Not [Op Greater [Constant (-4),Var "y"]]]])) (Print (Op Mul [Op Eq [Var "y",Constant 4],Op Greater [Var "y",Op Geq [Op Eq [Var "y",Var "y"],Constant 0]]]))]),IfThenElse (Op Sub [Op Mul [Constant (-5),Op Or [Var "x",Var "x"]],Var "y"]) (Print (Constant (-4))) (Block ["ol" := Constant 3,While (Var "ol") (Block ["x" := Op Neg [Op Neg [Op And [Op Eq [Var "ol",Constant (-4)],Constant (-5)]]],"ol" := Op Sub [Var "ol",Constant 1]])]),IfThenElse (Op Sub [Op Less [Var "y",Op Eq [Var "x",Var "y"]],Op Not [Op Geq [Var "x",Constant (-9)]]]) ("x" := Var "y") (Print (Op Not [Var "x"])),IfThenElse (Op Less [Constant 8,Op Geq [Var "x",Var "y"]]) (Block [IfThenElse (Op Less [Op Sub [Op And [Op Not [Var "x"],Op Or [Var "y",Var "y"]],Op Or [Var "y",Constant 7]],Op Or [Op And [Var "x",Constant (-9)],Constant (-3)]]) ("x" := Constant 0) ("y" := Op Or [Op Leq [Op Or [Constant (-1),Var "y"],Var "y"],Constant 1]),Block ["ul" := Constant 7,While (Var "ul") (Block [Print (Op Sub [Op And [Op Leq [Var "x",Var "y"],Constant (-1)],Constant 1]),"ul" := Op Sub [Var "ul",Constant 1]])]]) (Block ["x" := Op Greater [Var "y",Op Geq [Var "y",Constant 10]],Block ["x" := Op Greater [Var "y",Constant (-7)]]])]],Block ["x" := Constant 1,"y" := Constant 1,Block [IfThenElse (Op Eq [Op Mul [Op Leq [Constant (-9),Op Leq [Constant 0,Var "x"]],Constant (-9)],Op Or [Var "x",Var "y"]]) (Block [Block ["x" := Constant (-8)],Block ["wl" := Constant 7,While (Var "wl") (Block [Print (Op Less [Op Leq [Var "x",Var "wl"],Op Less [Var "y",Var "y"]]),"wl" := Op Sub [Var "wl",Constant 1]])]]) (Print (Op Add [Op Greater [Var "x",Op Leq [Var "y",Constant 5]],Constant (-6)])),Print (Op Greater [Var "x",Op Neg [Var "x"]]),Block ["ll" := Constant 3,While (Var "ll") (Block [Print (Op Sub [Var "x",Var "y"]),"ll" := Op Sub [Var "ll",Constant 1]])],Block ["x" := Op And [Op Mul [Op Eq [Constant (-1),Op Greater [Var "x",Constant (-7)]],Op Less [Var "x",Op Or [Constant (-2),Var "y"]]],Op Add [Constant 10,Op Mul [Var "x",Constant 4]]],Block ["wl" := Constant 2,While (Var "wl") (Block ["x" := Op Or [Op Eq [Constant 0,Op Add [Constant (-1),Var "y"]],Constant 1],"wl" := Op Sub [Var "wl",Constant 1]])]],Block [Block ["kl" := Constant 6,While (Var "kl") (Block [Print (Constant (-9)),"kl" := Op Sub [Var "kl",Constant 1]])],IfThenElse (Op Greater [Constant 2,Op Neg [Op Mul [Var "x",Op And [Var "x",Constant 6]]]]) (IfThenElse (Op Geq [Op Greater [Op Geq [Var "x",Var "y"],Constant 6],Op Add [Constant (-10),Var "x"]]) (Print (Op And [Op Not [Op Greater [Op Less [Var "y",Var "x"],Var "y"]],Op And [Constant 1,Var "y"]])) (Print (Op Neg [Op Add [Op Sub [Op Or [Constant 9,Var "y"],Constant (-8)],Op Geq [Var "y",Var "x"]]]))) (Block ["xl" := Constant 4,While (Var "xl") (Block [Print (Op Neg [Op Or [Op Add [Var "xl",Op Eq [Var "x",Constant (-2)]],Constant 10]]),"xl" := Op Sub [Var "xl",Constant 1]])]),Block ["nl" := Constant 8,While (Var "nl") (Block [Print (Op Add [Op Greater [Op Eq [Var "x",Constant 1],Constant 0],Op Less [Constant 1,Var "y"]]),"nl" := Op Sub [Var "nl",Constant 1]])],"x" := Op Geq [Constant 0,Op And [Var "y",Constant 2]],Block ["kl" := Constant 6,While (Var "kl") (Block ["y" := Op Neg [Op Neg [Op Sub [Constant 0,Op Neg [Var "x"]]]],"kl" := Op Sub [Var "kl",Constant 1]])]]]],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Var "y") (Block [Print (Op Neg [Op Not [Op Mul [Var "x",Op Add [Var "y",Var "y"]]]]),Block [Block ["il" := Constant 4,While (Var "il") (Block ["x" := Op And [Op Mul [Op Leq [Op Or [Var "x",Constant (-9)],Var "x"],Op Or [Op Greater [Var "y",Constant (-1)],Constant 0]],Op And [Var "x",Constant (-10)]],"il" := Op Sub [Var "il",Constant 1]])],"y" := Constant 7],Block ["zl" := Constant 8,While (Var "zl") (Block ["x" := Op Leq [Op Add [Var "x",Op Less [Var "y",Var "y"]],Op Neg [Op Geq [Var "y",Var "y"]]],"zl" := Op Sub [Var "zl",Constant 1]])],Block ["vl" := Constant 2,While (Var "vl") (Block [Print (Op Geq [Op Less [Op Greater [Constant 3,Var "x"],Constant 0],Op Less [Var "x",Constant 1]]),"vl" := Op Sub [Var "vl",Constant 1]])],Block ["wl" := Constant 7,While (Var "wl") (Block ["x" := Op And [Constant 4,Op Leq [Constant 10,Op And [Constant (-10),Op Or [Var "wl",Constant (-5)]]]],"wl" := Op Sub [Var "wl",Constant 1]])]]) (IfThenElse (Op Greater [Op Geq [Op Leq [Op Mul [Var "y",Var "x"],Op Greater [Var "x",Constant 8]],Op Sub [Var "y",Var "y"]],Constant (-1)]) (Block [IfThenElse (Op Greater [Op Geq [Op Less [Var "x",Op Geq [Constant 6,Var "x"]],Op Or [Constant 7,Var "x"]],Constant (-7)]) (Print (Op Add [Var "x",Constant (-10)])) (Print (Op Eq [Op Leq [Op And [Op Geq [Var "y",Var "x"],Constant 1],Op Eq [Constant (-3),Var "y"]],Op Eq [Op Or [Constant 0,Var "y"],Op Geq [Var "y",Constant 0]]])),Block ["x" := Op Not [Op Not [Op And [Op Sub [Var "y",Constant 8],Constant (-1)]]]]]) (Block ["yl" := Constant 1,While (Var "yl") (Block ["y" := Op Sub [Op Mul [Var "x",Op Neg [Op Or [Constant (-5),Var "yl"]]],Op Not [Op Add [Op Or [Constant (-10),Var "yl"],Constant (-4)]]],"yl" := Op Sub [Var "yl",Constant 1]])]))],Block ["x" := Constant 1,"y" := Constant 1,IfThenElse (Op Or [Constant 0,Var "x"]) (IfThenElse (Var "y") (Print (Op Eq [Constant 0,Op Not [Var "y"]])) (Block [Print (Op Mul [Op Not [Op Less [Var "x",Var "x"]],Op And [Var "x",Var "y"]]),"y" := Constant 1])) (Block [Block [Block ["x" := Op Eq [Op Less [Var "y",Constant (-3)],Op Eq [Constant 8,Var "x"]]],Block [Print (Op Or [Op Add [Constant 0,Op Add [Constant (-8),Op Neg [Var "y"]]],Constant 1])]],Block [Print (Op Add [Op Sub [Constant 7,Var "x"],Var "x"]),Print (Var "y")],Block ["il" := Constant 7,While (Var "il") (Block ["y" := Op Neg [Op Eq [Constant (-7),Var "x"]],"il" := Op Sub [Var "il",Constant 1]])],Print (Op Eq [Op Greater [Constant (-8),Op Add [Var "y",Constant 6]],Var "x"]),"x" := Var "x"])],Block ["x" := Constant 1,"y" := Constant 1,Block ["tl" := Constant 2,While (Var "tl") (Block [Print (Var "x"),"tl" := Op Sub [Var "tl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,Block ["hl" := Constant 4,While (Var "hl") (Block ["y" := Op Mul [Op Geq [Var "x",Op Neg [Op And [Constant 1,Var "hl"]]],Op Less [Var "hl",Op Leq [Constant 3,Var "hl"]]],"hl" := Op Sub [Var "hl",Constant 1]])]],Block ["x" := Constant 1,"y" := Constant 1,"y" := Op Sub [Op Leq [Var "x",Op Sub [Constant (-4),Op Neg [Var "y"]]],Op Eq [Var "x",Constant (-9)]]],Block ["x" := Constant 1,"y" := Constant 1,Block [IfThenElse (Op Greater [Var "x",Constant 5]) (Block [Block ["dl" := Constant 6,While (Var "dl") (Block [Print (Constant (-9)),"dl" := Op Sub [Var "dl",Constant 1]])],Block [Print (Op Less [Op Not [Var "y"],Op Sub [Op Add [Op Add [Var "y",Var "x"],Var "x"],Op Or [Constant 0,Var "y"]]])]]) ("y" := Op Not [Var "x"]),Block [Print (Op Add [Var "y",Op Mul [Op Mul [Var "x",Constant (-6)],Op Greater [Op Geq [Constant (-2),Var "x"],Var "x"]]]),Print (Op Geq [Constant 1,Op Leq [Op Or [Var "x",Var "x"],Constant (-7)]]),IfThenElse (Var "y") (Print (Constant (-36))) (Print (Op Neg [Op Add [Op Leq [Var "y",Var "x"],Constant 6]])),Print (Constant 0),Block ["tl" := Constant 10,While (Var "tl") (Block ["x" := Op Geq [Var "x",Constant 0],"tl" := Op Sub [Var "tl",Constant 1]])]],Block ["ul" := Constant 2,While (Var "ul") (Block [Print (Op Add [Op Less [Op Mul [Constant (-3),Var "y"],Op Mul [Op Greater [Var "y",Constant (-6)],Constant 0]],Op Add [Constant 1,Var "ul"]]),"ul" := Op Sub [Var "ul",Constant 1]])],Block ["wl" := Constant 6,While (Var "wl") (Block [Print (Op Or [Constant 1,Op Leq [Var "y",Var "x"]]),"wl" := Op Sub [Var "wl",Constant 1]])],IfThenElse (Op Add [Op Mul [Constant 0,Var "x"],Op Mul [Var "x",Constant (-3)]]) (Block ["vl" := Constant 6,While (Var "vl") (Block [Print (Op Or [Op Mul [Var "y",Constant (-8)],Op Eq [Constant (-10),Op Neg [Op And [Var "vl",Var "vl"]]]]),"vl" := Op Sub [Var "vl",Constant 1]])]) (Block ["al" := Constant 10,While (Var "al") (Block [Print (Op Sub [Constant (-6),Op Not [Op Leq [Op And [Constant 5,Var "al"],Var "y"]]]),"al" := Op Sub [Var "al",Constant 1]])])]],Block ["x" := Constant 1,"y" := Constant 1,Block [Block ["sl" := Constant 4,While (Var "sl") (Block ["x" := Op Sub [Constant 1,Op Less [Op Neg [Op Geq [Constant 5,Var "y"]],Op Leq [Var "x",Op Less [Var "x",Var "y"]]]],"sl" := Op Sub [Var "sl",Constant 1]])],Block ["rl" := Constant 8,While (Var "rl") (Block ["y" := Op Not [Var "rl"],"rl" := Op Sub [Var "rl",Constant 1]])],IfThenElse (Op Sub [Op Less [Op Or [Var "y",Var "y"],Op Less [Var "x",Var "x"]],Constant (-7)]) ("x" := Op Or [Op Add [Op And [Var "y",Var "y"],Op Sub [Var "x",Constant 1]],Constant (-5)]) (Block ["ml" := Constant 1,While (Var "ml") (Block [Print (Op Mul [Op Geq [Constant (-5),Op Less [Op Sub [Constant 3,Var "x"],Var "ml"]],Op Neg [Op Or [Var "y",Var "x"]]]),"ml" := Op Sub [Var "ml",Constant 1]])]),Block ["ll" := Constant 2,While (Var "ll") (Block [Print (Constant 0),"ll" := Op Sub [Var "ll",Constant 1]])],Block ["pl" := Constant 1,While (Var "pl") (Block ["x" := Op Leq [Var "x",Op Or [Constant 2,Var "y"]],"pl" := Op Sub [Var "pl",Constant 1]])]]]]

-- START appendix --




unitTest :: (Eq b, Show a, Show b) => String -> (a -> b) -> a -> b -> IO Bool
unitTest name f x spec = do
  -- Using QuickCheck here for convenience (since it catches exceptions and
  -- timeouts for us)
  result <- quickCheckWithResult stdArgs {chatty = False} (f x == spec)
  case result of
    Failure {} -> do
      putStrLn "*** Failed!"
      putStrLn $ "Input: " ++ show x
      catch (putStrLn $ "Output: " ++ show (f x))
            (\msg -> putStrLn $ "Exception: " ++ show (msg :: SomeException))
      putStrLn $ "Expected output: " ++ show spec
      return False
    GaveUp {} -> do
      putStrLn "Gave up."
      return False
    _ -> return True


unitTests :: (Eq b, Show a, Show b) => String -> (a -> b) -> [a] -> [b] -> IO ()
unitTests name f inputs spec = do
  putStr $ "  [testing] " ++ name ++ "... "
  res <- run $ zipWith (unitTest name f) inputs spec
  if res then putStrLn $ "ok."
  else return ()
  where
    run [] = return True
    run (x:xs) = do
      r <- x
      if r then run xs
      else return False

quickTest :: Testable prop => String -> prop -> IO ()
quickTest name prop = do
  putStr $ "  [checking] " ++ name ++ "... "
  let args = stdArgs {chatty = False}
  result <- quickCheckWithResult args prop 
  if not (isSuccess result)
  then do
      putStrLn "eh, nope."
      putStrLn (output result)
  else putStrLn "ok."
  
