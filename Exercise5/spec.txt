 The state of each place in the board is one of the following:

  - illegal
  - empty
  - occupied

 So, a legal position is one which is empty or occupied.

 When (i,j) is illegal then no ((i,j),_) is in the list defining the
 state of the board.

 ((i,j),True)  means (i,j) is occupied by a peg, and
 ((i,j),False) means (i,j) is empty,
 where 0 <= i,j <= 25, i.e. the maximum size of a board is 26x26


type BoardSpec = [(Coord, Bool)]




--   0 1 2 3 4 5 6 
--0      o o o
--1      o o o
--2  o o o o o o o
--3  o o o - o o o
--4  o o o o o o o
--5      o o o
--6      o o o
--

crossb :: BoardSpec
crossb = [((2,0), True),((3,0), True),((4,0), True),((2,1), True),((3,1), True),((4,1), True),((0,2), True),((1,2), True),((2,2), True),((3,2), True),((4,2), True),((5,2), True),((6,2), True),((0,3), True),((1,3), True),((2,3), True),((3,3), False),((4,3), True),((5,3), True),((6,3), True),((0,4), True),((1,4), True),((2,4), True),((3,4), True),((4,4), True),((5,4), True),((6,4), True),((2,5), True),((3,5), True),((4,5), True),((2,6), True),((3,6), True),((4,6), True)]- 


-- Using this, and the function countPeg you defined above, also
-- define a function simulateMoves which only gives Just the number of
-- resulting pegs, or Nothing if an illegal move occurs:
